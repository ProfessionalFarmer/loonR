# MSig_H <- MSigDBGeneSets(collection = "H", species ="Hs")
# MSig_C7 <- MSigDBGeneSets(collection = "C7", species ="Hs")
# # C5 和 GO重复
# MSig_C5 <- MSigDBGeneSets(collection = "C5", species ="Hs")
#
# ListGSC <- list(PW_KEGG=PW_KEGG,
#                 GO_MF=GO_MF,
#                 MSig_H=MSig_H,
#                 MSig_C2=MSig_C2,
#                 MSig_C7=MSig_C7,
#                 GO_BP=GO_BP)
## then the gene set collections would be as below:
ListGSC <- list(CustomGS=CustomGS)
## initiate a *GSCA* object
gsca <- GSCA(listOfGeneSetCollections=ListGSC, geneList=phenotype)
## preprocess
gsca1 <- preprocess(gsca, species="Hs", "ENSEMBL", # keytypes(org.Hs.eg.db)  # ENSEMBL   SYMBOL
keepMultipleMappings=TRUE, duplicateRemoverMethod="max",
orderAbsValue=FALSE)
## analysis
if (requireNamespace("doParallel", quietly=TRUE)) {
doParallel::registerDoParallel(cores=100)
}
set.seed(111)
## support parallel calculation using multiple cores
gsca2 <- analyze(gsca1,
para=list(pValueCutoff=0.05, pAdjustMethod="BH",
nPermutations=1000, minGeneSetSize=5,
exponent=1),
doGSOA = FALSE)  # Here we do gsoa
## append gene sets terms
gsca3 <- appendGSTerms(gsca2 )
#View(gsca3@result$GSEA.results$CustomGS)
#gsca3 <- appendGSTerms(gsca2, msigdbGSCs=c("MSig_C2","MSig_H","MSig_C7"), goGSCs=c("GO_MF","GO_BP"), keggGSCs=c("PW_KEGG"))
#gsca3 <- appendGSTerms(gsca2, goGSCs=c("GO_MF","GO_BP"), keggGSCs=c("PW_KEGG"))
return(gsca3)
}
############################################################################# Function
function.analysis.g1 <- diffCalculate(rna.rsem.log, g1.sample, "MESCC1")
function.analysis.g2 <- diffCalculate(rna.rsem.log, g2.sample, "MESCC2")
function.analysis.g3 <- diffCalculate(rna.rsem.log, g3.sample, "MESCC3")
function.analysis.g4 <- diffCalculate(rna.rsem.log, g4.sample, "MESCC4")
g1.function.res <- do.call("rbind", lapply(function.analysis.g1@result$GSEA.results,function(x) {x$GroupName <- replicate(nrow(x),"MESCC1"); return(x)})    )
g2.function.res <- do.call("rbind", lapply(function.analysis.g2@result$GSEA.results,function(x) {x$GroupName <- replicate(nrow(x),"MESCC2"); return(x)})    )
g3.function.res <- do.call("rbind", lapply(function.analysis.g3@result$GSEA.results,function(x) {x$GroupName <- replicate(nrow(x),"MESCC3"); return(x)})    )
g4.function.res <- do.call("rbind", lapply(function.analysis.g4@result$GSEA.results,function(x) {x$GroupName <- replicate(nrow(x),"MESCC4"); return(x)})    )
g1.function.res$Gene.Set.Term <- row.names(g1.function.res)
g2.function.res$Gene.Set.Term <- row.names(g2.function.res)
g3.function.res$Gene.Set.Term <- row.names(g3.function.res)
g4.function.res$Gene.Set.Term <- row.names(g4.function.res)
function.analysis.res <- rbind(g1.function.res, g2.function.res, g3.function.res, g4.function.res)
function.analysis.res$Adjusted.Pvalue <- -log10(function.analysis.res$Adjusted.Pvalue)
function.analysis.res[ which(is.infinite(function.analysis.res$Adjusted.Pvalue) ),  ]$Adjusted.Pvalue <- 4  # Minimum 5
function.analysis.res$Adjusted.Pvalue <- function.analysis.res$Adjusted.Pvalue * sign(function.analysis.res$Observed.score)
# subset data frame
function.analysis.res <- function.analysis.res[,c("Gene.Set.Term","Adjusted.Pvalue","GroupName")]
function.analysis.res <- reshape::cast(function.analysis.res,Gene.Set.Term~GroupName, value = "Adjusted.Pvalue", fun.aggregate = mean)
row.names(function.analysis.res) <- gsub("CustomGS.","",function.analysis.res$Gene.Set.Term)
function.analysis.res <- as.data.frame(function.analysis.res[,-c(1)])
# term.immune <- c(  row.names(function.analysis.res)[grep("mmun",row.names(function.analysis.res))],   "PD-L1 expression and PD-1 checkpoint pathway in cancer", "interleukin-7-mediated signaling pathway", "complement activation, classical pathway", "Natural killer cell mediated cytotoxicity" )
# term.metabolism <- c("Amino sugar and nucleotide sugar metabolism","glucose metabolic process","Fructose and mannose metabolism","Galactose metabolism","glutamine metabolic process", "glutathione metabolic process", "Glycerophospholipid metabolism","lysophospholipase activity","Fatty acid metabolism")
#
# term.signature <- c("regulation of epithelial to mesenchymal transition", "canonical Wnt signaling pathway", "positive regulation of mesenchymal cell proliferation","TGF-beta signaling pathway","chromatin remodeling", "response to wounding","hematopoietic stem cell differentiation")
# term.pathway   <- c("MAPK signaling pathway", "PI3K-Akt signaling pathway","JAK-STAT signaling pathway", "proteolysis", "G1/S transition of mitotic cell cycle", "G2/M transition of mitotic cell cycle", "integrin-mediated signaling pathway", "VEGF signaling pathway","apoptotic process","angiogenesis")
# term.g4.specific <- c("REACTOME_TRANSCRIPTIONAL_REGULATION_BY_SMALL_RNAS", "REACTOME_BASE_EXCISION_REPAIR")
######################################for custom gene set
term.signature <- c("EPITH_LOBODA", "WNT_FLIER", "MYC_TARGETS_CP", "MESENCH_LOBODA", "EMT_CORE_GENES", "TGFB_KEGG", "MATRIX_REMODEL_REACTOME", "WOUND_RESPONSE_GO_BP","CSC_BATLLE","HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION","dbEMT")
term.pathway <- c("MAPK_KEGG","PI3K_ACT_REACTOME","SRC_ACT_BIOCARTA","JAK_STAT_KEGG","CASPASE_BIOCARTA","PROTEASOME_KEGG","KEGG_CELL_CYCLE","TRANSLATION_RIBOS_REACTOME","INTEGRIN_BIOCARTA","VEGF_VEGFR_REACTOME")
term.estimate <- c("IMMUNE_ESTIMATE", "STROMAL_ESTIMATE")
term.immune <- c( "PD1_REACTOME",row.names(function.analysis.res)[grep("IMMUNE",row.names(function.analysis.res))],  "COMPLEMENT_BIOCARTA")
term.metabolism <- c("AMINO_SUGAR_NUCLEO_METAB_KEGG","PENTOSE_GLUC_METAB_KEGG", "FRUTOSE_MANNOSE_METAB_KEGG", "GALACTOSE_METAB_KEGG","GLUTAMINE_GO_BP","GLUTATHIONE_KEGG","NITROGEN_METAB_KEGG","GLYCEROPHOSPHOLIPID_METAB_KEGG","LYSOPHOSPHOLIPID_PID","FATTY_ACID_METAB_KEGG")
term.emt <- c("REACTOME_TGF_BETA_RECEPTOR_SIGNALING_IN_EMT_EPITHELIAL_TO_MESENCHYMAL_TRANSITION","HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION","dbEMT","ALONSO_METASTASIS_EMT_UP")
######################################for custom gene set
#anncolors = 	c("#e49e07", "#0473b2", "#ca7aa5", "#019e74")
anncolors = ggsci::pal_lancet("lanonc")(4)
names(anncolors) =  colnames(function.analysis.res) #
breaks <- seq(-2, 2, length.out=51)
#term.signature
pheatmap::pheatmap(
function.analysis.res[term.signature, ], #
cluster_rows = F, cluster_cols =F,
color = colorRampPalette(c("#6b943c", "white", "#b60505"))(50),
breaks = breaks,
cellwidth = 25, cellheight = 15,
annotation_col = data.frame(row.names = colnames(function.analysis.res),
MESCC=as.factor(colnames(function.analysis.res))
),
show_colnames = FALSE, annotation_legend = F, legend = FALSE,
annotation_colors = list(MESCC=anncolors)
)
#term.pathway
pheatmap::pheatmap(
function.analysis.res[term.pathway, ], #
cluster_rows = F, cluster_cols =F,
color = colorRampPalette(c("#6b943c", "white", "#b60505"))(50),
breaks = breaks,
cellwidth = 25, cellheight = 15,
annotation_col = data.frame(row.names = colnames(function.analysis.res),
MESCC=as.factor(colnames(function.analysis.res))
),
show_colnames = FALSE,
annotation_colors = list(MESCC=anncolors)
)
#term.estimate
pheatmap::pheatmap(
function.analysis.res[term.estimate, ], #
cluster_rows = F, cluster_cols =F,
color = colorRampPalette(c("#6b943c", "white", "#b60505"))(50),
breaks = breaks,
cellwidth = 25, cellheight = 15,
annotation_col = data.frame(row.names = colnames(function.analysis.res),
MESCC=as.factor(colnames(function.analysis.res))
),
show_colnames = FALSE, annotation_legend = F, legend = FALSE,
annotation_colors = list(MESCC=anncolors)
)
#term.immune
pheatmap::pheatmap(
function.analysis.res[term.immune, ], #
cluster_rows = F, cluster_cols =F,
color = colorRampPalette(c("#6b943c", "white", "#b60505"))(50),
breaks = breaks,
cellwidth = 25, cellheight = 15,
annotation_col = data.frame(row.names = colnames(function.analysis.res),
MESCC=as.factor(colnames(function.analysis.res))
),
show_colnames = FALSE, annotation_legend = F, legend = FALSE,
annotation_colors = list(MESCC=anncolors)
)
#term.metabolism
pheatmap::pheatmap(
function.analysis.res[term.metabolism, ], #
cluster_rows = F, cluster_cols =F,
color = colorRampPalette(c("#6b943c", "white", "#b60505"))(50),
breaks = breaks,
cellwidth = 25, cellheight = 15,
annotation_col = data.frame(row.names = colnames(function.analysis.res),
MESCC=as.factor(colnames(function.analysis.res))
),
show_colnames = FALSE, annotation_legend = F, legend = FALSE,
annotation_colors = list(MESCC=anncolors)
)
# term.emt
pheatmap::pheatmap(
function.analysis.res[term.emt, ], #
cluster_rows = F, cluster_cols =F,
color = colorRampPalette(c("#6b943c", "white", "#b60505"))(50),
breaks = breaks,
cellwidth = 25, cellheight = 15,
annotation_col = data.frame(row.names = colnames(function.analysis.res),
MESCC=as.factor(colnames(function.analysis.res))
),
show_colnames = FALSE, annotation_legend = F, legend = FALSE,
annotation_colors = list(MESCC=anncolors)
)
#rm(funtion.analysis.g1, funtion.analysis.g2, funtion.analysis.g3, funtion.analysis.g4)
#rm(g1.sample, g2.sample, g3.sample, g4.sample, breaks)
View(snf.result$Wall)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
library(parallel)
library(doParallel)
library(foreach)
registerDoParallel(cores=150)
parallel::mcaffinity(c(1:150)) # limit cores to use
iteration.res <- foreach(mRNA=seq(1000,10000,1000), .combine = rbind)%do%{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = mRNA) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = mRNA)  # 0.2
cnv.snf.df         <- cnv.data
miRNA.fe.res <- foreach(miRNA=seq(200,1000,100), .combine = rbind)%do%{
miRNA.snf.df       <- FSbyMAD(miRNA.data[rowMeans(miRNA.data) > 0.05 , ], cut.type="topk",value = miRNA) # 0.75
k.iteration.res <- foreach(k=seq(10,30,5), .combine = rbind)%do%{
i.iteration.res <- foreach(i=seq(0.3,0.8,0.05), .combine = rbind) %dopar% {
#dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df) )
dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- loonR::run_SNF(dataL, alpha = i, K = k, Iterations = 20,
dist.method = "Euclidean",
survival = survival.analysis.df)
tmp.df <- as.data.frame(snf.result$Survival.Analysis)
tmp.df$mRNA = mRNA
tmp.df$miRNA = miRNA
tmp.df
}
i.iteration.res
}
k.iteration.res
}
miRNA.fe.res
}
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
library(parallel)
library(doParallel)
library(foreach)
registerDoParallel(cores=150)
parallel::mcaffinity(c(1:150)) # limit cores to use
iteration.res <- foreach(mRNA=seq(1000,10000,1000), .combine = rbind)%do%{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = mRNA) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = mRNA)  # 0.2
cnv.snf.df         <- cnv.data
miRNA.fe.res <- foreach(miRNA=seq(200,1000,100), .combine = rbind)%do%{
miRNA.snf.df       <- FSbyMAD(miRNA.data[rowMeans(miRNA.data) > 0.05 , ], cut.type="topk",value = miRNA) # 0.75
k.iteration.res <- foreach(k=seq(10,30,5), .combine = rbind)%do%{
i.iteration.res <- foreach(i=seq(0.3,0.8,0.05), .combine = rbind) %dopar% {
#dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df) )
dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- loonR::run_SNF(dataL, alpha = i, K = k, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
tmp.df <- as.data.frame(snf.result$Survival.Analysis)
tmp.df$mRNA = mRNA
tmp.df$miRNA = miRNA
tmp.df
}
i.iteration.res
}
k.iteration.res
}
miRNA.fe.res
}
write.table(iteration.res, file="~/tmp.tsv", quote = F)
write.table(iteration.res, file="~/tmp.tsv", quote = F, sep ="\t")
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
library(parallel)
library(doParallel)
library(foreach)
registerDoParallel(cores=150)
parallel::mcaffinity(c(1:150)) # limit cores to use
iteration.res <- foreach(mRNA=seq(1000,10000,1000), .combine = rbind)%do%{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = mRNA) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = mRNA)  # 0.2
cnv.snf.df         <- cnv.data
miRNA.fe.res <- foreach(miRNA=seq(200,1000,100), .combine = rbind)%do%{
miRNA.snf.df       <- FSbyMAD(miRNA.data[rowMeans(miRNA.data) > 0.05 , ], cut.type="topk",value = miRNA) # 0.75
k.iteration.res <- foreach(k=seq(10,30,5), .combine = rbind)%do%{
i.iteration.res <- foreach(i=seq(0.3,0.8,0.05), .combine = rbind) %dopar% {
#dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df) )
dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- loonR::run_SNF(dataL, alpha = i, K = k, Iterations = 20,
dist.method = "Euclidean",
survival = survival.analysis.df)
tmp.df <- as.data.frame(snf.result$Survival.Analysis)
tmp.df$mRNA = mRNA
tmp.df$miRNA = miRNA
tmp.df
}
i.iteration.res
}
k.iteration.res
}
miRNA.fe.res
}
write.table(iteration.res, file="~/tmp.tsv", quote = F, sep ="\t")
load("~/work/baidu2V2/rdata/V1/20201106.data.list.rdata")
library(SNFtool)
library(bioDist)
library(CancerSubtypes)
library(NMF)
mRNA.data = log2(data.list$RNA.tpm+1)
mRNA.data <- mRNA.data[rowMeans(mRNA.data) > 0.05 , ]
miRNA.data = log2(data.list$miRNA.cpm+1)
methylation.data = data.list$Methylation.Ensembl.Promoter
cnv.data = data.list$CNV.reduced.sg
if(FALSE){
mRNA.snf.df <-  mRNA.data
miRNA.snf.df <- miRNA.data
methylation.snf.df <- methylation.data
cnv.snf.df <- cnv.data
}else{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = 3000) # 0.75
miRNA.snf.df       <- FSbyMAD(miRNA.data, cut.type="topk",value = 200) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = 3000)  # 0.2
cnv.snf.df         <- FSbyMAD(cnv.data, cut.type="topk",value = 5000)
}
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.5, K = 15, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
snf.evidence.stats <- loonR::SNF_Similairity_Hist(snf.result$AffinityL,
evidence.type = c("RNA","miRNA","Met", "CNV"),
group = snf.result$Clustering$Cluster4)
snf.evidence.stats$paired.similarity.hist
snf.evidence.stats$group.support.evidence.pie
snf.result$EstimateResult
snf.group <- snf.result$Clustering$Cluster4
############# Overall
library("survminer")
tmp.df <- clin.info[,c("overall.survival...............1..dead..0.alive.","overall.survival........time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","OS","TNM.stage","Grade")
tmp.df$OS <- as.integer(tmp.df$OS)
# censored data -> 0
tmp.df$Status <- as.integer(tmp.df$Status)
#save(snf.group,file="./snf.group.rdata.tmp")
# add snf group label
tmp.df$MESCC <- snf.group
#tmp.df$SNF <- c( replicate(length(g1.sample),"SNF1"), replicate(length(g2.sample),"SNF2"), replicate(length(g3.sample),"SNF2"), replicate(length(g4.sample),"SNF2") )
os.fit <- survfit(Surv(OS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Overall Survival",
risk.table = TRUE, ylab = "Overall Survival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
# 之比较2和4组计算p value
#smp.select <- snf.group==2 | snf.group ==4
#cat("MESCC2 - MESCC4",surv_pvalue(survfit(Surv(OS, Status) ~ MESCC, data = tmp.df[smp.select,]) )$pval.txt, "\n"  )
#rm(tmp.df, smp.select)
################## Disease free
tmp.df <- clin.info[,c("recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free.","Disease.free.......Survival.time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","DFS","TNM.stage","Grade")
tmp.df$DFS <- as.integer(tmp.df$DFS)
tmp.df$Status <- as.integer(tmp.df$Status)
# add snf group label
tmp.df$MESCC <- snf.group
os.fit <- survfit(Surv(DFS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Disease free suvival time",
risk.table = TRUE, ylab = "Disease free suvival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
rm(tmp.df, os.fit)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.35, K = 15, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
snf.evidence.stats <- loonR::SNF_Similairity_Hist(snf.result$AffinityL,
evidence.type = c("RNA","miRNA","Met", "CNV"),
group = snf.result$Clustering$Cluster4)
snf.evidence.stats$paired.similarity.hist
snf.evidence.stats$group.support.evidence.pie
############# Overall
library("survminer")
tmp.df <- clin.info[,c("overall.survival...............1..dead..0.alive.","overall.survival........time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","OS","TNM.stage","Grade")
tmp.df$OS <- as.integer(tmp.df$OS)
# censored data -> 0
tmp.df$Status <- as.integer(tmp.df$Status)
#save(snf.group,file="./snf.group.rdata.tmp")
# add snf group label
tmp.df$MESCC <- snf.group
#tmp.df$SNF <- c( replicate(length(g1.sample),"SNF1"), replicate(length(g2.sample),"SNF2"), replicate(length(g3.sample),"SNF2"), replicate(length(g4.sample),"SNF2") )
os.fit <- survfit(Surv(OS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Overall Survival",
risk.table = TRUE, ylab = "Overall Survival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
# 之比较2和4组计算p value
#smp.select <- snf.group==2 | snf.group ==4
#cat("MESCC2 - MESCC4",surv_pvalue(survfit(Surv(OS, Status) ~ MESCC, data = tmp.df[smp.select,]) )$pval.txt, "\n"  )
#rm(tmp.df, smp.select)
################## Disease free
tmp.df <- clin.info[,c("recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free.","Disease.free.......Survival.time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","DFS","TNM.stage","Grade")
tmp.df$DFS <- as.integer(tmp.df$DFS)
tmp.df$Status <- as.integer(tmp.df$Status)
# add snf group label
tmp.df$MESCC <- snf.group
os.fit <- survfit(Surv(DFS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Disease free suvival time",
risk.table = TRUE, ylab = "Disease free suvival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
rm(tmp.df, os.fit)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.35, K = 10, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.35, K = 10, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
############# Overall
library("survminer")
tmp.df <- clin.info[,c("overall.survival...............1..dead..0.alive.","overall.survival........time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","OS","TNM.stage","Grade")
tmp.df$OS <- as.integer(tmp.df$OS)
# censored data -> 0
tmp.df$Status <- as.integer(tmp.df$Status)
#save(snf.group,file="./snf.group.rdata.tmp")
# add snf group label
tmp.df$MESCC <- snf.group
#tmp.df$SNF <- c( replicate(length(g1.sample),"SNF1"), replicate(length(g2.sample),"SNF2"), replicate(length(g3.sample),"SNF2"), replicate(length(g4.sample),"SNF2") )
os.fit <- survfit(Surv(OS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Overall Survival",
risk.table = TRUE, ylab = "Overall Survival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
# 之比较2和4组计算p value
#smp.select <- snf.group==2 | snf.group ==4
#cat("MESCC2 - MESCC4",surv_pvalue(survfit(Surv(OS, Status) ~ MESCC, data = tmp.df[smp.select,]) )$pval.txt, "\n"  )
#rm(tmp.df, smp.select)
################## Disease free
tmp.df <- clin.info[,c("recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free.","Disease.free.......Survival.time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","DFS","TNM.stage","Grade")
tmp.df$DFS <- as.integer(tmp.df$DFS)
tmp.df$Status <- as.integer(tmp.df$Status)
# add snf group label
tmp.df$MESCC <- snf.group
os.fit <- survfit(Surv(DFS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Disease free suvival time",
risk.table = TRUE, ylab = "Disease free suvival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
rm(tmp.df, os.fit)
devtools::document()
rm(run_SNF())
rm(run_SNF
)
devtools::document()
devtools::document()
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
getwd()
devtools::document()
devtools::document()
devtools::document()
library(loonR)
library(loonR)
?loonR::get.palette.color
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
