bin_prob = mean(as.numeric(Class))
) %>%
ungroup( )
calibrate.m <- mutate(BreastCancert, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class))
) %>%
ungroup( )
calibrate.m <- mutate(BreastCancer, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class))
) %>%
ungroup( )
View(calibrate())
View(calibrate)
View(calibrate.m)
calibrate.m <- mutate(BreastCancer, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class)-1)
) %>%
ungroup( )
View(calibrate.m)
as.numeric(BreastCancer$Class)
calibrate(m, group=Class, method=c("boot"), B=100 )
BreastCancer.cal <- mutate(BreastCancer, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class)-1)
) %>%
ungroup( )
ggplot(BreastCancer.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul))
BreastCancer.cal <- mutate(BreastCancer, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class)-1),
se = sqrt((bin_prob * (1 - bin_prob)) / n),
ul = bin_prob + 1.96 * se,
ll = bin_prob - 1.96 * se
) %>%
ungroup( )
ggplot(BreastCancer.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul))
View(BreastCancer.cal)
ggplot(BreastCancer.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black")
ggplot(BreastCancer.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() + # 45 degree line indicating perfect calibration
geom_smooth(method = "lm", se = FALSE, linetype = "dashed",
color = "black", formula = y~-1 + x)
ggplot(BreastCancer.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() + # 45 degree line indicating perfect calibration
geom_smooth(method = "lm", se = FALSE, linetype = "dashed",
color = "black", formula = y~-1 + x) +
# straight line fit through estimates
geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess") +
# loess fit through estimates
xlab("") +
ylab("Observed Probability") +
theme_minimal() +
ggtitle(model_name)
ggplot(BreastCancer.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() + # 45 degree line indicating perfect calibration
geom_smooth(method = "lm", se = FALSE, linetype = "dashed",
color = "black", formula = y~-1 + x) +
# straight line fit through estimates
geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess") +
# loess fit through estimates
xlab("") +
ylab("Observed Probability") +
theme_minimal() +
ggtitle("Calibration plot")
BreastCancer$Class
BreastCancer$Class=="malignant"
group = as.factor(BreastCancer$Class=="malignant")
pred = BreastCancer$pred
group
class(group)
is.factor(group)
warning("aa")
df <- data.frame(pred=pred, group=group)
df
df <- data.frame(pred=pred, Class=group)
#library(rms) fit must be from lrm or ols
#calibrate.m <- calibrate(m, group=Class, method=c("boot"), B=100 ) %>%
dfcal <- mutate(df, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class)-1),
se = sqrt((bin_prob * (1 - bin_prob)) / n),
ul = bin_prob + 1.96 * se,
ll = bin_prob - 1.96 * se
) %>%
ungroup( )
rm(dfcal)
df.cal <- mutate(df, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class)-1),
se = sqrt((bin_prob * (1 - bin_prob)) / n),
ul = bin_prob + 1.96 * se,
ll = bin_prob - 1.96 * se
) %>%
ungroup( )
ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() + # 45 degree line indicating perfect calibration
geom_smooth(method = "lm", se = FALSE, linetype = "dashed",
color = "black", formula = y~-1 + x) +
# straight line fit through estimates
geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess") +
# loess fit through estimates
xlab("Predicted risk") +
ylab("Observed Proportion") +
theme_minimal() +
ggtitle("Calibration plot")
title = "Calibration plot"
p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_bw() +
ggtitle(title)
smooth=TRUE
if(!is.factor(group)){
stop("group Must be a TRUE/FALSE factor")
}
require(gridExtra)
require(dplyr)
df <- data.frame(pred=pred, Class=group)
#library(rms) fit must be from lrm or ols
#calibrate.m <- calibrate(m, group=Class, method=c("boot"), B=100 ) %>%
df.cal <- mutate(df, bin = ntile(pred, 10)) %>%
group_by(bin) %>%
mutate(n = n(),
bin_pred = mean(pred),
bin_prob = mean(as.numeric(Class)-1),
se = sqrt((bin_prob * (1 - bin_prob)) / n),
ul = bin_prob + 1.96 * se,
ll = bin_prob - 1.96 * se
) %>%
ungroup( )
p1 = ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() + # 45 degree line indicating perfect calibration
if(smooth){
# loess fit through estimates
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
}
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_bw() +
ggtitle(title)
p1 = ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() # 45 degree line indicating perfect calibration
if(smooth){
# loess fit through estimates
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
}
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_bw() +
ggtitle(title)
P1
p1
p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_minimal() +
ggtitle(title)
p1 = ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() # 45 degree line indicating perfect calibration
if(smooth){
# loess fit through estimates
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
}
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_bw() +
ggtitle(title)
p1
p1 = ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() # 45 degree line indicating perfect calibration
if(smooth){
# loess fit through estimates
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
}
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_bw(panel.grid.minor = element_blank()) +
ggtitle(title)
p1
p1 = ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() # 45 degree line indicating perfect calibration
if(smooth){
# loess fit through estimates
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
}
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion")
p1
p1 = ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
geom_abline() # 45 degree line indicating perfect calibration
if(smooth){
# loess fit through estimates
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
}
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_bw() + theme(panel.grid.minor = element_blank()) +
ggtitle(title)
p1
ggplot(data, aes(x = pred) ) +
geom_histogram(fill = "black", bins = 200) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
xlab("Predicted Probability") +
ylab("") +
theme_minimal()
ggplot(df.cal, aes(x = pred) ) +
geom_histogram(fill = "black", bins = 200) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
xlab("Predicted Probability") +
ylab("") +
theme_minimal() +
scale_y_continuous(breaks = c(0, 40)) +
theme(panel.grid.minor = element_blank())
df.cal$pred
df
ggplot(df.cal, aes(x = pred) ) +
geom_histogram(fill = "black", bins = 200)
ggplot(df.cal, aes(x = pred) ) +
geom_histogram(fill = "black", bins = 20) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
xlab("Predicted probability distribution") +
ylab("") +
theme_minimal() +
theme(panel.grid.minor = element_blank())
ggplot(df.cal, aes(x = pred) ) +
geom_histogram(fill = "black", bins = 20) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
xlab("Predicted probability distribution") +
ylab("")
library(ggpubr)
gghistogram(df.cal, x="pred")
gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black")
gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1)) +
xlab("Predicted probability distribution") +
ylab("")
gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20)
gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20) +
scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1))
gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20) +
xlab("Predicted probability distribution") +
ylab("") +
theme_minimal()
gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20) +
xlab("Predicted probability distribution") +
ylab("")
p1
ggscatter(df.cal, x="bin_pred", y ="bin_prob")
ggscatter(df.cal, x="bin_pred", y ="bin_prob", , ymin = "ll", ymax = "ul")
show.oberved.ci=FALSE
ggscatter(df.cal, x="bin_pred", y ="bin_prob") + geom_abline()
ggscatter(df.cal, x="bin_pred", y ="bin_prob")
ggscatter(df.cal, x="bin_pred", y ="bin_prob") + geom_abline(intercept = 0, slope = 1)
p1 = ggscatter(df.cal, x="bin_pred", y ="bin_prob") + geom_abline(intercept = 0, slope = 1)
p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
theme_bw() + theme(panel.grid.minor = element_blank()) +
ggtitle(title)
p1
p1 = ggplot(df.cal, aes(x = bin_pred, y = bin_prob, ymin = ll, ymax = ul)) +
geom_pointrange(size = 0.5, color = "black") +
#scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
#scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.2)) +
geom_abline() + # 45 degree line indicating perfect calibration
theme_bw() + theme(panel.grid.minor = element_blank())
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
ggtitle(title)
p1
p1 = ggscatter(df.cal, x="bin_pred", y ="bin_prob") + geom_abline(intercept = 0, slope = 1)
p1 = p1 + geom_smooth(aes(x = pred, y = as.numeric(Class) - 1),
color = "red", se = FALSE, method = "loess")
p1 = p1 + xlab("Predicted risk") + ylab("Observed Proportion") +
ggtitle(title)
p1
loonR::plot_waterfall(risk.score = df.cal$pred, label = df$Class)
View(loonR::plot_waterfall)
loonR::plot_waterfall(risk.score = df.cal$pred - 0.5, label = df$Class)
gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20) +
xlab("Predicted probability distribution") +
ylab("")
g2 <- gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20) +
xlab("Predicted probability distribution") +
ylab("")
g2
arrangeGrob(g1, g2, respect = TRUE, heights = c(1, 0.25), ncol = 1)
p2 <- gghistogram(df.cal, x="pred") +
geom_histogram(fill = "black", bins = 20) +
xlab("Predicted probability distribution") +
ylab("")
g <- arrangeGrob(p1, p2, respect = TRUE, heights = c(1, 0.25), ncol = 1)
g
grid.newpage()
grid.draw(g)
library(grid)
grid.newpage()
grid.draw(g)
g[[3]]
g[[3]]
g
a = grid.draw(g)
a
g[[3]]
grid.newpage()
grid.draw(g)
invisible(g)
grid.newpage()
grid.draw(g)
a = invisible(g)
a
grid.draw(g)
a = invisible(g)
a
cowplot::plot_grid(p1, p2, nrow = 2, ncol = 1)
cowplot::plot_grid(p1, p2, nrow = 2, ncol = 1, rel_widths = c(1,0.25))
cowplot::plot_grid(p1, p2, nrow = 2, ncol = 1, rel_widths = c(1,5))
cowplot::plot_grid(p1, p2, nrow = 2, ncol = 1, rel_widths = c(1,1))
cowplot::plot_grid(p1, p2, nrow = 2, ncol = 1, rel_heights = c(2,1))
loonR::plot_waterfall(risk.score = df.cal$pred - 0.5, label = df$Class)
df <- data.frame(pred=pred, Class=group)
loonR::plot_waterfall(df$pred-0.5, df$Class)
ggplot(df, aes(x = pred, y = as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)) +
geom_jitter(height = 0.1, size =1, alpha = 0.5) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"))
ggplot(df, aes(x = pred, y = as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)) +
geom_jitter(height = 0.1, size =1, alpha = 0.5) +
geom_smooth(method = "glm",
method.args = list(family = "binomial")) +
theme_minimal()
?geom_smooth
ggscatter(df, x="pred", y= as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)))
ggscatter(df, x="pred", y= as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE)) - 1) )
factor(group==unique(group)[2], levels = c(FALSE,TRUE))
df <- data.frame(pred=pred, Class=group)
waterfall_plot = loonR::plot_waterfall(df$pred-0.5, df$Class)
df$ClassFactor = factor(group==unique(group)[2], levels = c(FALSE,TRUE))
df$ClassFactorNumric = as.numeric(df$ClassFactor)-1
require(ggpubr)
ggscatter(df, x="pred", y= "ClassFactorNumric")
ggscatter(df, x="pred", y= "ClassFactorNumric", add = "jitter")
ggplot(df, aes(x = pred, y = as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)) +
geom_jitter(height = 0.1, size =1, alpha = 0.5) +
geom_smooth(method = "glm",
method.args = list(family = "binomial")) +
theme_minimal() +
scale_y_continuous(breaks = c(0, 1), labels = c("Alive", "Dead")) +
ylab("")
ggplot(df, aes(x = pred, y = as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)) +
geom_jitter(height = 0.1, size =1, alpha = 0.5) +
geom_smooth(method = "glm", se = FALSE,
method.args = list(family = "binomial")) +
theme_minimal()
ggplot(df, aes(x = pred, y = as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)) +
geom_jitter(height = 0.1, size =1, alpha = 0.5) +
geom_smooth(method = "glm", se = FALSE,
method.args = list(family = "binomial")) +
theme_minimal() +
scale_y_continuous(breaks = c(0, 1), labels = c("Alive", "Dead")) +
ylab("") +
xlab("Predicted probability")
ggplot(df, aes(x = pred, y = as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)) +
geom_jitter(height = 0.1, size =1, alpha = 0.5) +
geom_smooth(method = "glm", se = FALSE,
method.args = list(family = "binomial")) +
theme_minimal() +
scale_y_continuous(breaks = c(0, 1), labels = unique(group)) +
ylab("") +
xlab("Predicted probability")
logistic_curve_fit <-
ggplot(df, aes(x = pred, y = as.numeric(factor(group==unique(group)[2], levels = c(FALSE,TRUE))) - 1)) +
geom_jitter(height = 0.1, size =1, alpha = 0.5) +
geom_smooth(method = "glm", se = FALSE,
method.args = list(family = "binomial")) +
theme_minimal() +
scale_y_continuous(breaks = c(0, 1), labels = unique(group)) +
ylab("") +
xlab("Predicted probability")
logistic_curve_fit
gghistogram(df, x = "pred")
gghistogram(df, x = "pred", fill = "Class")
gghistogram(df, x = "pred", fill = "Class", palette = "aaas")
gghistogram(df, x = "pred", fill = "Class", palette = "aaas") +
ylab("Count") + xlab("Predicted probability")
gghistogram(df, x = "pred", fill = "Class", palette = "aaas", rug =T) +
ylab("Count") + xlab("Predicted probability")
ggplot(data, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill") +
theme_minimal()
ggplot(df, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill") +
theme_minimal()
theme_pubr()
ggplot(df, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill") +
theme_pubr()
ggplot(df, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill", bins = 10) +
theme_pubr()
ggplot(df, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill", bins = 10) +
theme_pubr() +
xlab("HOMR Linear Predictor") +
ylab("Proportion") +
scale_fill_brewer(Class, palette = "aaas")
palette = "aaas"
ggplot(df, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill", bins = 10) +
theme_pubr() +
xlab("HOMR Linear Predictor") +
ylab("Proportion")
palette = "aaas"
loonR::get.palette.color(palette)
ggplot(df, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill", bins = 10) +
theme_pubr() +
xlab("Predicted probability") +
ylab("Proportion") + scale_fill_manual(values = loonR::get.palette.color(palette))
View(loonR::get.palette.color)
ggplot(df, aes(x = pred, fill = Class)) +
geom_histogram(position = "fill", bins = 10) +
theme_pubr() +
xlab("Predicted probability") +
ylab("Proportion") + scale_fill_manual(values = loonR::get.palette.color(palette))
a=1
=1
b=1
list(a,b)
list(a=a,b=b)
ggboxplot(df, x = "Class", y = "pred")
ggboxplot(df, x = "Class", y = "pred") +
ylab("Predicted probability") + xlab("")
ggboxplot(df, x = "Class", y = "pred", fill = "Class", palette = palette) +
ylab("Predicted probability") + xlab("")
devtools::document()
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::install_github("gflab/gfplot")
library(loonR)
rm(list=ls(）)
rm(list=ls())
devtools::document()
library(loonR)
devtools::document()
library(loonR)
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
library(loonR)
