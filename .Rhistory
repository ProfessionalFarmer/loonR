library(plyranges)
library(dplyr)
candidate.genes <- unique(as.character(full.data$gene_id))
rm(list=ls())
# Oject: get a full data.frame
########### 1 读取IOE文件，得到event
ioe.events.df <- read.table("c99i95refMin2/suppa/all-ASevents.merged7.ioe", header = TRUE, sep = '\t' , stringsAsFactors = FALSE, check.names = FALSE)
colnames(ioe.events.df)
# remove alternative_transcripts column
ioe.events.df <- ioe.events.df[,-match(c("alternative_transcripts"), colnames(ioe.events.df) )]
library(tidyr)
ioe.events.df <- separate_rows(ioe.events.df, total_transcripts, sep=",")
# add AS events
ioe.events.df$event <- sapply(strsplit(ioe.events.df$event_id, ":"), function(x) {
x = unlist( strsplit( x[1],";" )[1] )
paste(x[2])
}
)
ioe.events.df <- reshape2::dcast(ioe.events.df, ... ~ event, value.var = "event_id", fun.aggregate = function(x) paste(x, collapse = ", "))
# rename columns' name
colnames(ioe.events.df)[1:3] <- c("chr", "gene", "transcript")
row.names(ioe.events.df) <- ioe.events.df$transcript
full.data <- ioe.events.df
rm(list=ls()[!grepl("full.data",ls())])
########### 2. 读取TPM文件，并合并
tpm.table.normal <- read.table("c99i95refMin2/suppa/normal.expression", header = T, row.names = 1, stringsAsFactors = FALSE)
tpm.table.tumor  <- read.table("c99i95refMin2/suppa/cancer.expression",  header = T, row.names = 1, stringsAsFactors = FALSE)
tpm.table <- merge(tpm.table.normal, tpm.table.tumor, by=0, all=TRUE)
rm(tpm.table.normal, tpm.table.tumor)
row.names(tpm.table) <- tpm.table$Row.names
tpm.table <- tpm.table[,-c(1)]
colnames(tpm.table) <- paste(colnames(tpm.table), "TPM", sep="-")
full.data <- merge(full.data, tpm.table, by=0, all=TRUE)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[, -c(1,2,3,4)]
###########  3 merge gff information
library(dplyr)
library(plyranges)
gff <- plyranges::read_gff("c99i95refMin2/gff/s2.clean.gtf")
gff.tmp <- gff %>% select(transcript_id, gene_id, gene_name)
gff.tmp <- as.data.frame(gff.tmp)
pos.min <- aggregate(start ~ transcript_id, data = gff.tmp, min)
pos.max <- aggregate(end   ~ transcript_id, data = gff.tmp, max)
# merge: first time
transcript.df <- merge(pos.min,pos.max,by="transcript_id")
strand <- unique(gff.tmp %>% select(transcript_id, gene_id, seqnames, strand) )
# merge: second time
transcript.df <- merge(strand, transcript.df, by="transcript_id")
exon.count <- aggregate(start ~ transcript_id, data = gff.tmp, length)
colnames(exon.count)[2] <- c("Exon count")
# merge: third time
transcript.df <- merge(transcript.df, exon.count, by="transcript_id")
exon.length <- data.frame(Length = gff.tmp$end-gff.tmp$start+1,
Transcript = gff.tmp$transcript_id)
exon.length <- aggregate(exon.length[,c(1)],
by=list(exon.length$Transcript), FUN = sum)
colnames(exon.length) <- c("transcript_id","Transcript length")
row.names(exon.length) <- exon.length$transcript_id
# merge: fourth time
transcript.df <- merge(transcript.df, exon.length, by="transcript_id")
# post process
row.names(transcript.df) <- transcript.df$transcript_id
transcript.df <- transcript.df[, -c(1)]
# merge full.data
full.data <- merge(transcript.df, full.data, by=0)
rm(list=ls()[!grepl("full.data",ls())])
full.data <- full.data[!is.na(full.data$gene_id), ]
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
############### 4 merge psi significance value
psi.sig <- read.table("c99i95refMin2/suppa/diffSplice.isoform.dpsi.temp.0", header = T, row.names = 1, stringsAsFactors = FALSE)
colnames(psi.sig) <- c("dPSI","p.val")
row.names(psi.sig) <- sapply(row.names(psi.sig), function(x) {
x = strsplit(x,";")
x = unlist(x)
x[2]
})
## merge full.data
full.data <- merge(full.data, psi.sig, by=0)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
############## 5 merge psi
psi.table.normal <- read.table("c99i95refMin2/suppa/AStranscripts.psiPerIsofrom.normal_isoform.psi", header = T, row.names = 1, stringsAsFactors = FALSE)
psi.table.tumor  <- read.table("c99i95refMin2/suppa/AStranscripts.psiPerIsofrom.cancer_isoform.psi",  header = T, row.names = 1, stringsAsFactors = FALSE)
psi.table <- merge(psi.table.normal, psi.table.tumor, by=0, all=TRUE)
rm(psi.table.normal, psi.table.tumor)
row.names(psi.table) <- sapply(psi.table$Row.names, function(x) {
x = strsplit(x,";")
x = unlist(x)
x[2]
})
psi.table <- psi.table[,-c(1)]
colnames(psi.table) <- paste(colnames(psi.table), "PSI", sep="-")
### merge full table
full.data <- merge(full.data, psi.table, by=0)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
# 第一步，根据基因名，找到基因对应的所有参考transcript的id
library(plyranges)
library(dplyr)
candidate.genes <- unique(as.character(full.data$gene_id))
gff <- loonR::getGeneRelatedTranscripts.Gff("/data/home2/Zhongxu/ref/refSeq.hg38.gtf", candidate.genes, max.transcript.length = 100000000)
gff <- as.data.frame(gff)
tmp = unique(gff$transcript_id)
transcript.gene.mapping <- unique(data.frame(gff$transcript_id,gff$gene_name))
# write.table( data.frame(ID=tmp),
#              file="/data/home2/Zhongxu/tmp/ORFFinder/ref.transcript.id", sep="\n", col.names = F, quote = F, row.names = F)
# 第二步，得到这些参考的氨基酸序列
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
save(protein.seq, file="./20200827-HCC-Public/20200927.refseq.protein.rdata")
load("./20200827-HCC-Public/20200927.refseq.protein.rdata")
invisible(seqRFLP::dataframe2fas(protein.seq[!duplicated(protein.seq$refseq_mrna),c(2,1)], file="/data/home2/Zhongxu/tmp/ORFFinder/ref.aa.fa"))
transcript.gene.mapping.tmp <- data.frame( loonR::getGeneRelatedTranscripts.Gff("c99i95refMin2/gff/s2.clean.gtf", candidate.genes, max.transcript.length = 100000000), stringsAsFactors = FALSE  )
transcript.gene.mapping.tmp <-  unique(data.frame(transcript.gene.mapping.tmp$transcript_id, transcript.gene.mapping.tmp$gene_name))
colnames(transcript.gene.mapping.tmp) <- colnames(transcript.gene.mapping)
transcript.gene.mapping <- unique( rbind(transcript.gene.mapping,transcript.gene.mapping.tmp) )
rm(transcript.gene.mapping.tmp)
write.table( transcript.gene.mapping, file="/data/home2/Zhongxu/tmp/ORFFinder/transcript.gene.map", sep="\t", col.names = F, quote = F, row.names = F)
write_gff(loonR::getGeneRelatedTranscripts.Gff(
"c99i95refMin2/gff/s2.clean.gtf", candidate.genes, max.transcript.length = 100000000),
file = "/data/home2/Zhongxu/tmp/ORFFinder/candidate.tmp.gtf")
library(dplyr)
library(plyranges)
# 第一步，根据基因名，找到基因对应的所有参考transcript的id
library(plyranges)
library(dplyr)
library(plyranges)
rm(list=ls())
# Oject: get a full data.frame
########### 1 读取IOE文件，得到event
ioe.events.df <- read.table("c99i95refMin2/suppa/all-ASevents.merged7.ioe", header = TRUE, sep = '\t' , stringsAsFactors = FALSE, check.names = FALSE)
colnames(ioe.events.df)
# remove alternative_transcripts column
ioe.events.df <- ioe.events.df[,-match(c("alternative_transcripts"), colnames(ioe.events.df) )]
library(tidyr)
ioe.events.df <- separate_rows(ioe.events.df, total_transcripts, sep=",")
# add AS events
ioe.events.df$event <- sapply(strsplit(ioe.events.df$event_id, ":"), function(x) {
x = unlist( strsplit( x[1],";" )[1] )
paste(x[2])
}
)
ioe.events.df <- reshape2::dcast(ioe.events.df, ... ~ event, value.var = "event_id", fun.aggregate = function(x) paste(x, collapse = ", "))
# rename columns' name
colnames(ioe.events.df)[1:3] <- c("chr", "gene", "transcript")
row.names(ioe.events.df) <- ioe.events.df$transcript
full.data <- ioe.events.df
rm(list=ls()[!grepl("full.data",ls())])
########### 2. 读取TPM文件，并合并
tpm.table.normal <- read.table("c99i95refMin2/suppa/normal.expression", header = T, row.names = 1, stringsAsFactors = FALSE)
tpm.table.tumor  <- read.table("c99i95refMin2/suppa/cancer.expression",  header = T, row.names = 1, stringsAsFactors = FALSE)
tpm.table <- merge(tpm.table.normal, tpm.table.tumor, by=0, all=TRUE)
rm(tpm.table.normal, tpm.table.tumor)
row.names(tpm.table) <- tpm.table$Row.names
tpm.table <- tpm.table[,-c(1)]
colnames(tpm.table) <- paste(colnames(tpm.table), "TPM", sep="-")
full.data <- merge(full.data, tpm.table, by=0, all=TRUE)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[, -c(1,2,3,4)]
###########  3 merge gff information
library(dplyr)
library(plyranges)
gff <- plyranges::read_gff("c99i95refMin2/gff/s2.clean.gtf")
gff.tmp <- gff %>% select(transcript_id, gene_id, gene_name)
gff.tmp <- as.data.frame(gff.tmp)
pos.min <- aggregate(start ~ transcript_id, data = gff.tmp, min)
pos.max <- aggregate(end   ~ transcript_id, data = gff.tmp, max)
# merge: first time
transcript.df <- merge(pos.min,pos.max,by="transcript_id")
strand <- unique(gff.tmp %>% select(transcript_id, gene_id, seqnames, strand) )
# merge: second time
transcript.df <- merge(strand, transcript.df, by="transcript_id")
exon.count <- aggregate(start ~ transcript_id, data = gff.tmp, length)
colnames(exon.count)[2] <- c("Exon count")
# merge: third time
transcript.df <- merge(transcript.df, exon.count, by="transcript_id")
exon.length <- data.frame(Length = gff.tmp$end-gff.tmp$start+1,
Transcript = gff.tmp$transcript_id)
exon.length <- aggregate(exon.length[,c(1)],
by=list(exon.length$Transcript), FUN = sum)
colnames(exon.length) <- c("transcript_id","Transcript length")
row.names(exon.length) <- exon.length$transcript_id
# merge: fourth time
transcript.df <- merge(transcript.df, exon.length, by="transcript_id")
# post process
row.names(transcript.df) <- transcript.df$transcript_id
transcript.df <- transcript.df[, -c(1)]
# merge full.data
full.data <- merge(transcript.df, full.data, by=0)
rm(list=ls()[!grepl("full.data",ls())])
full.data <- full.data[!is.na(full.data$gene_id), ]
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
############### 4 merge psi significance value
psi.sig <- read.table("c99i95refMin2/suppa/diffSplice.isoform.dpsi.temp.0", header = T, row.names = 1, stringsAsFactors = FALSE)
colnames(psi.sig) <- c("dPSI","p.val")
row.names(psi.sig) <- sapply(row.names(psi.sig), function(x) {
x = strsplit(x,";")
x = unlist(x)
x[2]
})
## merge full.data
full.data <- merge(full.data, psi.sig, by=0)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
############## 5 merge psi
psi.table.normal <- read.table("c99i95refMin2/suppa/AStranscripts.psiPerIsofrom.normal_isoform.psi", header = T, row.names = 1, stringsAsFactors = FALSE)
psi.table.tumor  <- read.table("c99i95refMin2/suppa/AStranscripts.psiPerIsofrom.cancer_isoform.psi",  header = T, row.names = 1, stringsAsFactors = FALSE)
psi.table <- merge(psi.table.normal, psi.table.tumor, by=0, all=TRUE)
rm(psi.table.normal, psi.table.tumor)
row.names(psi.table) <- sapply(psi.table$Row.names, function(x) {
x = strsplit(x,";")
x = unlist(x)
x[2]
})
psi.table <- psi.table[,-c(1)]
colnames(psi.table) <- paste(colnames(psi.table), "PSI", sep="-")
### merge full table
full.data <- merge(full.data, psi.table, by=0)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
knitr::opts_chunk$set(echo = TRUE)
# 第一步，根据基因名，找到基因对应的所有参考transcript的id
#library(dplyr)
library(plyranges)
candidate.genes <- unique(as.character(full.data$gene_id))
gff <- loonR::getGeneRelatedTranscripts.Gff("/data/home2/Zhongxu/ref/refSeq.hg19.gtf", candidate.genes, max.transcript.length = 100000000)
gff <- as.data.frame(gff)
tmp = unique(gff$transcript_id)
transcript.gene.mapping <- unique(data.frame(gff$transcript_id,gff$gene_name))
# write.table( data.frame(ID=tmp),
#              file="/data/home2/Zhongxu/tmp/ORFFinder/ref.transcript.id", sep="\n", col.names = F, quote = F, row.names = F)
# 第二步，得到这些参考的氨基酸序列
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
# 第一步，根据基因名，找到基因对应的所有参考transcript的id
#library(dplyr)
library(plyranges)
candidate.genes <- unique(as.character(full.data$gene_id))
gff <- loonR::getGeneRelatedTranscripts.Gff("/data/home2/Zhongxu/ref/refSeq.hg19.gtf", candidate.genes, max.transcript.length = 100000000)
gff <- loonR::getGeneRelatedTranscripts.Gff("/data/home2/Zhongxu/ref/refSeq.hg19.gtf", candidate.genes, max.transcript.length = 100000000)
library(plyranges)
library(plyranges)
gff <- loonR::getGeneRelatedTranscripts.Gff("/data/home2/Zhongxu/ref/refSeq.hg19.gtf", candidate.genes, max.transcript.length = 100000000)
library(plyranges)
library(dplyr)
candidate.genes <- unique(as.character(full.data$gene_id))
gff <- loonR::getGeneRelatedTranscripts.Gff("/data/home2/Zhongxu/ref/refSeq.hg38.gtf", candidate.genes)
gff <- as.data.frame(gff)
tmp = unique(gff$transcript_id)
transcript.gene.mapping <- unique(data.frame(gff$transcript_id,gff$gene_name))
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
save(protein.seq, file="./analysis/email/20200901.refseq.protein.rdata")
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
save(protein.seq, file="./analysis/email/20200901.refseq.protein.rdata")
ensembl
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
save(protein.seq, file="./analysis/email/20200901.refseq.protein.rdata")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
save(protein.seq, file="./analysis/email/20200901.refseq.protein.rdata")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
save(protein.seq, file="./analysis/email/20200901.refseq.protein.rdata")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
tmp
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl", host = "asia.ensembl.org")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
ensembl
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl", host = "asia.ensembl.org")
ensembl
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
protein.seq
View(protein.seq)
save(protein.seq, file="./analysis/email/20200901.refseq.protein.rdata")
save(protein.seq, file="./analysis/email/20200901.refseq.protein.rdata")
#library(dplyr)
library(plyranges)
rm(list=ls())
# Oject: get a full data.frame
########### 1 读取IOE文件，得到event
ioe.events.df <- read.table("c99i95refMin2/suppa/all-ASevents.merged7.ioe", header = TRUE, sep = '\t' , stringsAsFactors = FALSE, check.names = FALSE)
colnames(ioe.events.df)
# remove alternative_transcripts column
ioe.events.df <- ioe.events.df[,-match(c("alternative_transcripts"), colnames(ioe.events.df) )]
library(tidyr)
ioe.events.df <- separate_rows(ioe.events.df, total_transcripts, sep=",")
# add AS events
ioe.events.df$event <- sapply(strsplit(ioe.events.df$event_id, ":"), function(x) {
x = unlist( strsplit( x[1],";" )[1] )
paste(x[2])
}
)
ioe.events.df <- reshape2::dcast(ioe.events.df, ... ~ event, value.var = "event_id", fun.aggregate = function(x) paste(x, collapse = ", "))
# rename columns' name
colnames(ioe.events.df)[1:3] <- c("chr", "gene", "transcript")
row.names(ioe.events.df) <- ioe.events.df$transcript
full.data <- ioe.events.df
rm(list=ls()[!grepl("full.data",ls())])
########### 2. 读取TPM文件，并合并
tpm.table.normal <- read.table("c99i95refMin2/suppa/normal.expression", header = T, row.names = 1, stringsAsFactors = FALSE)
tpm.table.tumor  <- read.table("c99i95refMin2/suppa/cancer.expression",  header = T, row.names = 1, stringsAsFactors = FALSE)
tpm.table <- merge(tpm.table.normal, tpm.table.tumor, by=0, all=TRUE)
rm(tpm.table.normal, tpm.table.tumor)
row.names(tpm.table) <- tpm.table$Row.names
tpm.table <- tpm.table[,-c(1)]
colnames(tpm.table) <- paste(colnames(tpm.table), "TPM", sep="-")
full.data <- merge(full.data, tpm.table, by=0, all=TRUE)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[, -c(1,2,3,4)]
###########  3 merge gff information
library(dplyr)
library(plyranges)
gff <- plyranges::read_gff("c99i95refMin2/gff/s2.clean.gtf")
gff.tmp <- gff %>% select(transcript_id, gene_id, gene_name)
gff.tmp <- as.data.frame(gff.tmp)
pos.min <- aggregate(start ~ transcript_id, data = gff.tmp, min)
pos.max <- aggregate(end   ~ transcript_id, data = gff.tmp, max)
# merge: first time
transcript.df <- merge(pos.min,pos.max,by="transcript_id")
strand <- unique(gff.tmp %>% select(transcript_id, gene_id, seqnames, strand) )
# merge: second time
transcript.df <- merge(strand, transcript.df, by="transcript_id")
exon.count <- aggregate(start ~ transcript_id, data = gff.tmp, length)
colnames(exon.count)[2] <- c("Exon count")
# merge: third time
transcript.df <- merge(transcript.df, exon.count, by="transcript_id")
exon.length <- data.frame(Length = gff.tmp$end-gff.tmp$start+1,
Transcript = gff.tmp$transcript_id)
exon.length <- aggregate(exon.length[,c(1)],
by=list(exon.length$Transcript), FUN = sum)
colnames(exon.length) <- c("transcript_id","Transcript length")
row.names(exon.length) <- exon.length$transcript_id
# merge: fourth time
transcript.df <- merge(transcript.df, exon.length, by="transcript_id")
# post process
row.names(transcript.df) <- transcript.df$transcript_id
transcript.df <- transcript.df[, -c(1)]
# merge full.data
full.data <- merge(transcript.df, full.data, by=0)
rm(list=ls()[!grepl("full.data",ls())])
full.data <- full.data[!is.na(full.data$gene_id), ]
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
############### 4 merge psi significance value
psi.sig <- read.table("c99i95refMin2/suppa/diffSplice.isoform.dpsi.temp.0", header = T, row.names = 1, stringsAsFactors = FALSE)
colnames(psi.sig) <- c("dPSI","p.val")
row.names(psi.sig) <- sapply(row.names(psi.sig), function(x) {
x = strsplit(x,";")
x = unlist(x)
x[2]
})
## merge full.data
full.data <- merge(full.data, psi.sig, by=0)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
############## 5 merge psi
psi.table.normal <- read.table("c99i95refMin2/suppa/AStranscripts.psiPerIsofrom.normal_isoform.psi", header = T, row.names = 1, stringsAsFactors = FALSE)
psi.table.tumor  <- read.table("c99i95refMin2/suppa/AStranscripts.psiPerIsofrom.cancer_isoform.psi",  header = T, row.names = 1, stringsAsFactors = FALSE)
psi.table <- merge(psi.table.normal, psi.table.tumor, by=0, all=TRUE)
rm(psi.table.normal, psi.table.tumor)
row.names(psi.table) <- sapply(psi.table$Row.names, function(x) {
x = strsplit(x,";")
x = unlist(x)
x[2]
})
psi.table <- psi.table[,-c(1)]
colnames(psi.table) <- paste(colnames(psi.table), "PSI", sep="-")
### merge full table
full.data <- merge(full.data, psi.table, by=0)
rm(list=ls()[!grepl("full.data",ls())])
row.names(full.data) <- full.data$Row.names
full.data <- full.data[,-c(1)]
# 第一步，根据基因名，找到基因对应的所有参考transcript的id
#library(dplyr)
library(plyranges)
candidate.genes <- unique(as.character(full.data$gene_id))
gff <- loonR::getGeneRelatedTranscripts.Gff("/data/home2/Zhongxu/ref/refSeq.hg19.gtf", candidate.genes, max.transcript.length = 100000000)
gff <- as.data.frame(gff)
tmp = unique(gff$transcript_id)
transcript.gene.mapping <- unique(data.frame(gff$transcript_id,gff$gene_name))
# write.table( data.frame(ID=tmp),
#              file="/data/home2/Zhongxu/tmp/ORFFinder/ref.transcript.id", sep="\n", col.names = F, quote = F, row.names = F)
# 第二步，得到这些参考的氨基酸序列
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl", host = "asia.ensembl.org")
protein.seq = getSequence(id = tmp,
type = "refseq_mrna",
seqType = "peptide",
mart = ensembl)
save(protein.seq, file="./20200827-HCC-Public/20200927.refseq.protein.rdata")
load("./20200827-HCC-Public/20200927.refseq.protein.rdata")
invisible(seqRFLP::dataframe2fas(protein.seq[!duplicated(protein.seq$refseq_mrna),c(2,1)], file="/data/home2/Zhongxu/tmp/ORFFinder/ref.aa.fa"))
transcript.gene.mapping.tmp <- data.frame( loonR::getGeneRelatedTranscripts.Gff("c99i95refMin2/gff/s2.clean.gtf", candidate.genes, max.transcript.length = 100000000), stringsAsFactors = FALSE  )
transcript.gene.mapping.tmp <-  unique(data.frame(transcript.gene.mapping.tmp$transcript_id, transcript.gene.mapping.tmp$gene_name))
colnames(transcript.gene.mapping.tmp) <- colnames(transcript.gene.mapping)
transcript.gene.mapping <- unique( rbind(transcript.gene.mapping,transcript.gene.mapping.tmp) )
rm(transcript.gene.mapping.tmp)
write.table( transcript.gene.mapping, file="/data/home2/Zhongxu/tmp/ORFFinder/transcript.gene.map", sep="\t", col.names = F, quote = F, row.names = F)
write_gff(loonR::getGeneRelatedTranscripts.Gff(
"c99i95refMin2/gff/s2.clean.gtf", candidate.genes, max.transcript.length = 100000000),
file = "/data/home2/Zhongxu/tmp/ORFFinder/candidate.tmp.gtf")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(loonR)
devtools::document()
devtools::document()
library(loonR)
devtools::document()
devtools::document()
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
