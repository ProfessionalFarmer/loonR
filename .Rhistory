),
show_colnames = FALSE, annotation_legend = F, legend = FALSE,
annotation_colors = list(MESCC=anncolors)
)
# term.emt
pheatmap::pheatmap(
function.analysis.res[term.emt, ], #
cluster_rows = F, cluster_cols =F,
color = colorRampPalette(c("#6b943c", "white", "#b60505"))(50),
breaks = breaks,
cellwidth = 25, cellheight = 15,
annotation_col = data.frame(row.names = colnames(function.analysis.res),
MESCC=as.factor(colnames(function.analysis.res))
),
show_colnames = FALSE, annotation_legend = F, legend = FALSE,
annotation_colors = list(MESCC=anncolors)
)
#rm(funtion.analysis.g1, funtion.analysis.g2, funtion.analysis.g3, funtion.analysis.g4)
#rm(g1.sample, g2.sample, g3.sample, g4.sample, breaks)
View(snf.result$Wall)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
library(parallel)
library(doParallel)
library(foreach)
registerDoParallel(cores=150)
parallel::mcaffinity(c(1:150)) # limit cores to use
iteration.res <- foreach(mRNA=seq(1000,10000,1000), .combine = rbind)%do%{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = mRNA) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = mRNA)  # 0.2
cnv.snf.df         <- cnv.data
miRNA.fe.res <- foreach(miRNA=seq(200,1000,100), .combine = rbind)%do%{
miRNA.snf.df       <- FSbyMAD(miRNA.data[rowMeans(miRNA.data) > 0.05 , ], cut.type="topk",value = miRNA) # 0.75
k.iteration.res <- foreach(k=seq(10,30,5), .combine = rbind)%do%{
i.iteration.res <- foreach(i=seq(0.3,0.8,0.05), .combine = rbind) %dopar% {
#dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df) )
dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- loonR::run_SNF(dataL, alpha = i, K = k, Iterations = 20,
dist.method = "Euclidean",
survival = survival.analysis.df)
tmp.df <- as.data.frame(snf.result$Survival.Analysis)
tmp.df$mRNA = mRNA
tmp.df$miRNA = miRNA
tmp.df
}
i.iteration.res
}
k.iteration.res
}
miRNA.fe.res
}
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
library(parallel)
library(doParallel)
library(foreach)
registerDoParallel(cores=150)
parallel::mcaffinity(c(1:150)) # limit cores to use
iteration.res <- foreach(mRNA=seq(1000,10000,1000), .combine = rbind)%do%{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = mRNA) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = mRNA)  # 0.2
cnv.snf.df         <- cnv.data
miRNA.fe.res <- foreach(miRNA=seq(200,1000,100), .combine = rbind)%do%{
miRNA.snf.df       <- FSbyMAD(miRNA.data[rowMeans(miRNA.data) > 0.05 , ], cut.type="topk",value = miRNA) # 0.75
k.iteration.res <- foreach(k=seq(10,30,5), .combine = rbind)%do%{
i.iteration.res <- foreach(i=seq(0.3,0.8,0.05), .combine = rbind) %dopar% {
#dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df) )
dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- loonR::run_SNF(dataL, alpha = i, K = k, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
tmp.df <- as.data.frame(snf.result$Survival.Analysis)
tmp.df$mRNA = mRNA
tmp.df$miRNA = miRNA
tmp.df
}
i.iteration.res
}
k.iteration.res
}
miRNA.fe.res
}
write.table(iteration.res, file="~/tmp.tsv", quote = F)
write.table(iteration.res, file="~/tmp.tsv", quote = F, sep ="\t")
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
library(parallel)
library(doParallel)
library(foreach)
registerDoParallel(cores=150)
parallel::mcaffinity(c(1:150)) # limit cores to use
iteration.res <- foreach(mRNA=seq(1000,10000,1000), .combine = rbind)%do%{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = mRNA) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = mRNA)  # 0.2
cnv.snf.df         <- cnv.data
miRNA.fe.res <- foreach(miRNA=seq(200,1000,100), .combine = rbind)%do%{
miRNA.snf.df       <- FSbyMAD(miRNA.data[rowMeans(miRNA.data) > 0.05 , ], cut.type="topk",value = miRNA) # 0.75
k.iteration.res <- foreach(k=seq(10,30,5), .combine = rbind)%do%{
i.iteration.res <- foreach(i=seq(0.3,0.8,0.05), .combine = rbind) %dopar% {
#dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df) )
dataL = list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- loonR::run_SNF(dataL, alpha = i, K = k, Iterations = 20,
dist.method = "Euclidean",
survival = survival.analysis.df)
tmp.df <- as.data.frame(snf.result$Survival.Analysis)
tmp.df$mRNA = mRNA
tmp.df$miRNA = miRNA
tmp.df
}
i.iteration.res
}
k.iteration.res
}
miRNA.fe.res
}
write.table(iteration.res, file="~/tmp.tsv", quote = F, sep ="\t")
load("~/work/baidu2V2/rdata/V1/20201106.data.list.rdata")
library(SNFtool)
library(bioDist)
library(CancerSubtypes)
library(NMF)
mRNA.data = log2(data.list$RNA.tpm+1)
mRNA.data <- mRNA.data[rowMeans(mRNA.data) > 0.05 , ]
miRNA.data = log2(data.list$miRNA.cpm+1)
methylation.data = data.list$Methylation.Ensembl.Promoter
cnv.data = data.list$CNV.reduced.sg
if(FALSE){
mRNA.snf.df <-  mRNA.data
miRNA.snf.df <- miRNA.data
methylation.snf.df <- methylation.data
cnv.snf.df <- cnv.data
}else{
mRNA.snf.df        <- FSbyMAD(mRNA.data, cut.type="topk",value = 3000) # 0.75
miRNA.snf.df       <- FSbyMAD(miRNA.data, cut.type="topk",value = 200) # 0.75
methylation.snf.df <- FSbyMAD(methylation.data, cut.type="topk",value = 3000)  # 0.2
cnv.snf.df         <- FSbyMAD(cnv.data, cut.type="topk",value = 5000)
}
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.5, K = 15, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
snf.evidence.stats <- loonR::SNF_Similairity_Hist(snf.result$AffinityL,
evidence.type = c("RNA","miRNA","Met", "CNV"),
group = snf.result$Clustering$Cluster4)
snf.evidence.stats$paired.similarity.hist
snf.evidence.stats$group.support.evidence.pie
snf.result$EstimateResult
snf.group <- snf.result$Clustering$Cluster4
############# Overall
library("survminer")
tmp.df <- clin.info[,c("overall.survival...............1..dead..0.alive.","overall.survival........time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","OS","TNM.stage","Grade")
tmp.df$OS <- as.integer(tmp.df$OS)
# censored data -> 0
tmp.df$Status <- as.integer(tmp.df$Status)
#save(snf.group,file="./snf.group.rdata.tmp")
# add snf group label
tmp.df$MESCC <- snf.group
#tmp.df$SNF <- c( replicate(length(g1.sample),"SNF1"), replicate(length(g2.sample),"SNF2"), replicate(length(g3.sample),"SNF2"), replicate(length(g4.sample),"SNF2") )
os.fit <- survfit(Surv(OS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Overall Survival",
risk.table = TRUE, ylab = "Overall Survival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
# 之比较2和4组计算p value
#smp.select <- snf.group==2 | snf.group ==4
#cat("MESCC2 - MESCC4",surv_pvalue(survfit(Surv(OS, Status) ~ MESCC, data = tmp.df[smp.select,]) )$pval.txt, "\n"  )
#rm(tmp.df, smp.select)
################## Disease free
tmp.df <- clin.info[,c("recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free.","Disease.free.......Survival.time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","DFS","TNM.stage","Grade")
tmp.df$DFS <- as.integer(tmp.df$DFS)
tmp.df$Status <- as.integer(tmp.df$Status)
# add snf group label
tmp.df$MESCC <- snf.group
os.fit <- survfit(Surv(DFS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Disease free suvival time",
risk.table = TRUE, ylab = "Disease free suvival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
rm(tmp.df, os.fit)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.35, K = 15, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
snf.evidence.stats <- loonR::SNF_Similairity_Hist(snf.result$AffinityL,
evidence.type = c("RNA","miRNA","Met", "CNV"),
group = snf.result$Clustering$Cluster4)
snf.evidence.stats$paired.similarity.hist
snf.evidence.stats$group.support.evidence.pie
############# Overall
library("survminer")
tmp.df <- clin.info[,c("overall.survival...............1..dead..0.alive.","overall.survival........time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","OS","TNM.stage","Grade")
tmp.df$OS <- as.integer(tmp.df$OS)
# censored data -> 0
tmp.df$Status <- as.integer(tmp.df$Status)
#save(snf.group,file="./snf.group.rdata.tmp")
# add snf group label
tmp.df$MESCC <- snf.group
#tmp.df$SNF <- c( replicate(length(g1.sample),"SNF1"), replicate(length(g2.sample),"SNF2"), replicate(length(g3.sample),"SNF2"), replicate(length(g4.sample),"SNF2") )
os.fit <- survfit(Surv(OS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Overall Survival",
risk.table = TRUE, ylab = "Overall Survival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
# 之比较2和4组计算p value
#smp.select <- snf.group==2 | snf.group ==4
#cat("MESCC2 - MESCC4",surv_pvalue(survfit(Surv(OS, Status) ~ MESCC, data = tmp.df[smp.select,]) )$pval.txt, "\n"  )
#rm(tmp.df, smp.select)
################## Disease free
tmp.df <- clin.info[,c("recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free.","Disease.free.......Survival.time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","DFS","TNM.stage","Grade")
tmp.df$DFS <- as.integer(tmp.df$DFS)
tmp.df$Status <- as.integer(tmp.df$Status)
# add snf group label
tmp.df$MESCC <- snf.group
os.fit <- survfit(Surv(DFS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Disease free suvival time",
risk.table = TRUE, ylab = "Disease free suvival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
rm(tmp.df, os.fit)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.35, K = 10, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
survival.analysis.df <- clin.info[,c(
"overall.survival........time",
"overall.survival...............1..dead..0.alive.",
"Disease.free.......Survival.time",
"recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free."  )]
survival.analysis.df <- data.frame(lapply(survival.analysis.df,as.numeric), check.names = F)
row.names(survival.analysis.df) <- row.names(clin.info)
colnames(survival.analysis.df) <- c("OS.time", "OS.event", "RFS.time", "RFS.event")
################# merge dataframe
dataL <- list( t(mRNA.snf.df), t(miRNA.snf.df), t(methylation.snf.df), t(cnv.snf.df) )
# Euclidean, Pearson, Spearman, mutualInfo, Manhattan, KLD
snf.result <- run_SNF(dataL, alpha = 0.35, K = 10, Iterations = 20,
dist.method = "Pearson",
survival = survival.analysis.df)
############# Overall
library("survminer")
tmp.df <- clin.info[,c("overall.survival...............1..dead..0.alive.","overall.survival........time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","OS","TNM.stage","Grade")
tmp.df$OS <- as.integer(tmp.df$OS)
# censored data -> 0
tmp.df$Status <- as.integer(tmp.df$Status)
#save(snf.group,file="./snf.group.rdata.tmp")
# add snf group label
tmp.df$MESCC <- snf.group
#tmp.df$SNF <- c( replicate(length(g1.sample),"SNF1"), replicate(length(g2.sample),"SNF2"), replicate(length(g3.sample),"SNF2"), replicate(length(g4.sample),"SNF2") )
os.fit <- survfit(Surv(OS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Overall Survival",
risk.table = TRUE, ylab = "Overall Survival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
# 之比较2和4组计算p value
#smp.select <- snf.group==2 | snf.group ==4
#cat("MESCC2 - MESCC4",surv_pvalue(survfit(Surv(OS, Status) ~ MESCC, data = tmp.df[smp.select,]) )$pval.txt, "\n"  )
#rm(tmp.df, smp.select)
################## Disease free
tmp.df <- clin.info[,c("recurrence.or.metastasis.....1..dead.recurrence.metastasis..0..free.","Disease.free.......Survival.time","TNM.stage.the.Eighth.Edition.","Grade")]
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("A","",tmp.df$TNM.stage.the.Eighth.Edition.)
tmp.df$TNM.stage.the.Eighth.Edition. <- gsub("B","",tmp.df$TNM.stage.the.Eighth.Edition.)
colnames(tmp.df) <- c("Status","DFS","TNM.stage","Grade")
tmp.df$DFS <- as.integer(tmp.df$DFS)
tmp.df$Status <- as.integer(tmp.df$Status)
# add snf group label
tmp.df$MESCC <- snf.group
os.fit <- survfit(Surv(DFS, Status) ~ MESCC, data = tmp.df)
ggsurvplot(os.fit, main = "Disease free suvival time",
risk.table = TRUE, ylab = "Disease free suvival",
risk.table.y.text.col = TRUE,
risk.table.height = 0.4,
pval = TRUE,
palette = "lancet")
rm(tmp.df, os.fit)
devtools::document()
rm(run_SNF())
rm(run_SNF
)
devtools::document()
devtools::document()
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
getwd()
devtools::document()
devtools::document()
devtools::document()
library(loonR)
library(loonR)
?loonR::get.palette.color
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
library(loonR)
devtools::document()
devtools::document()
devtools::document()
library(loonR)
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
devtools::document()
devtools::document()
library(loonR)
devtools::document()
devtools::document()
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
devtools::document()
library(loonR)
devtools::document()
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
devtools::document()
devtools::document()
library(loonR)
View(loonR::heatmap.with.lgfold.riskpro)
View(loonR::get.palette.color)
scales::show_col(c("#0c3e74","#77a8cd","white","#d86652","#7e0821"))
loonR::get.palette.color("sp1", show.color = T)
palette="sp1"
my_palettes <- list(
# From Gfplot
`jama_classic` = c("#164870", "#10B4F3", "#FAA935", "#2D292A", "#87AAB9", "#CAC27E", "#818282"),
# The palette with grey: color blind
`cbPalette` = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"),
# The palette with black: color blind
`cbbPalette` = c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"),
# selected from public
`sp1` <- c("#00AFBB", "#E7B800", "#0392cf", "#7570B3", "#FC4E07", "#BB3099", "#ADC252", "#be9b7b", "#75A3BA", "#bbbbbb"  )
)
names(my_palettes)
my_palettes$``
my_palettes <- list(
# From Gfplot
`jama_classic` = c("#164870", "#10B4F3", "#FAA935", "#2D292A", "#87AAB9", "#CAC27E", "#818282"),
# The palette with grey: color blind
`cbPalette` = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"),
# The palette with black: color blind
`cbbPalette` = c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"),
`sp1` <- c("#00AFBB", "#E7B800", "#0392cf", "#7570B3", "#FC4E07", "#BB3099", "#ADC252", "#be9b7b", "#75A3BA", "#bbbbbb"  )
)
my_palettes <- list(
# From Gfplot
`jama_classic` = c("#164870", "#10B4F3", "#FAA935", "#2D292A", "#87AAB9", "#CAC27E", "#818282"),
# The palette with grey: color blind
`cbPalette` = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"),
# The palette with black: color blind
`cbbPalette` = c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"),
# selected from public
`sp1` = c("#00AFBB", "#E7B800", "#0392cf", "#7570B3", "#FC4E07", "#BB3099", "#ADC252", "#be9b7b", "#75A3BA", "#bbbbbb"  )
)
palette %in% names(my_palettes)
colors = head(my_palettes[[c(palette)]],n)
colors
col.pal <- scales::alpha(colors, alpha)
col.pal <- scales::alpha(colors, 0.1)
scales::show_col(col.pal)
col.pal <- scales::alpha(colors, 0.9)
scales::show_col(col.pal)
library(loonR)
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
rm(list=ls())
??BiocManager::install
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
devtools::install_github("r-lib/pkgdown")
usethis::use_pkgdown()
pkgdown::build_site()
library(loonR)
pkgdown::build_site()
.Last.error.trace
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::create_package()
getwd()
usethis::create_package("/data/home2/Zhongxu/Rpackage/loonR")
