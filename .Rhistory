od = column_order(ht)
cs = comb_size(m)
decorate_annotation("Intersection\nsize", {
grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], "native") + unit(2, "pt"),
default.units = "native", just = "bottom", gp = gpar(fontsize = 8))
})
upset(  fromList(    list(Normal=unique(normal), Tumor=unique(tumor))   ),
text.scale = 1.5 , mb.ratio= c(0.6,0.4))
plot.list =  list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )
lm <- ComplexHeatmap::list_to_matrix(   plot.list           )
m = ComplexHeatmap::make_comb_mat(lm, remove_complement_set = TRUE, mode = "distinct")
ht = draw(UpSet(m))
od = column_order(ht)
cs = comb_size(m)
decorate_annotation("Intersection\nsize", {
grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], "native") + unit(2, "pt"),
default.units = "native", just = "bottom", gp = gpar(fontsize = 8))
})
upset_plot <- function(plot.list){
#plot.list =  list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )
lm <- ComplexHeatmap::list_to_matrix(   plot.list           )
m = ComplexHeatmap::make_comb_mat(lm, remove_complement_set = TRUE, mode = "distinct")
ht = draw(UpSet(m, text.scale = 1.5 , mb.ratio= c(0.6,0.4) ) )
od = column_order(ht)
cs = comb_size(m)
decorate_annotation("Intersection\nsize", {
grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], "native") + unit(2, "pt"),
default.units = "native", just = "bottom", gp = gpar(fontsize = 8))
})
}
upset_plot( list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N ) )
plot.list =  list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )
lm <- ComplexHeatmap::list_to_matrix(   plot.list           )
m = ComplexHeatmap::make_comb_mat(lm, remove_complement_set = TRUE, mode = "distinct")
UpSet(m, text.scale = 1.5, mb.ratio= c(0.6,0.4) )
UpSet(m)
upset_plot <- function(plot.list){
#plot.list =  list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )
lm <- ComplexHeatmap::list_to_matrix(   plot.list           )
m = ComplexHeatmap::make_comb_mat(lm, remove_complement_set = TRUE, mode = "distinct")
ht = draw( UpSet(m) )
od = column_order(ht)
cs = comb_size(m)
decorate_annotation("Intersection\nsize", {
grid.text(cs[od], x = seq_along(cs), y = unit(cs[od], "native") + unit(2, "pt"),
default.units = "native", just = "bottom", gp = gpar(fontsize = 8))
})
}
upset_plot( list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N ) )
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
text.scale = 1.5 , mb.ratio= c(0.6,0.4))
?upset
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
text.scale = 1.5 , mb.ratio= c(0.6,0.4), mainbar.y.label = "ha")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
text.scale = 1.5 , mb.ratio= c(0.6,0.4), mainbar.y.label = "Overlapping Genes", title = "a")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N, CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N, CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),  nsets = 7, # how many sample to show
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001T=CRC001T, CRC001N=CRC001N )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001T=CRC001T, CRC001N=CRC001N )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping Genes", sets.x.label = "Genes")
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping genes", sets.x.label = "Total gens")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4), set_size.show = TRUE,
mainbar.y.label = "Overlapping genes", sets.x.label = "Total gens")
## normal group
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## tumor group
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## paired transcript
upset(  fromList(   list(CRC001T=CRC001T, CRC001N=CRC001N )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.5,0.5), set_size.show = TRUE,
mainbar.y.label = "Overlapping genes", sets.x.label = "Total gens")
## all
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N, CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),  nsets = 7, # how many sample to show
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.5,0.5), set_size.show = TRUE,
mainbar.y.label = "Overlapping genes", sets.x.label = "Total gens")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4), set_size.show = TRUE,
mainbar.y.label = "Overlapping genes", sets.x.label = "Total gens")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4), set_size.show = TRUE,
mainbar.y.label = "Overlappiupset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =7000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## tumor group
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =7000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.4,0.6),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## paired transcript
upset(  fromList(   list(CRC001T=CRC001T, CRC001N=CRC001N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =7000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.4,0.6),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.4,0.6), set_size.scale_max =7000, set_size.show = TRUE,
mainbar.y.label = "Overlapping genes", sets.x.label = "Total gens")
## all
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N, CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =7000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.4,0.6),  nsets = 7, # how many sample to show
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
ng genes", sets.x.label = "Total gens")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =7000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =9000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =10000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =12000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.5,0.5),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.4,0.6),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## tumor group
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =10000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
## tumor group
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping transcripts", sets.x.label = "Total transcripts")
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
## normal group
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
## tumor group
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
## paired transcript
upset(  fromList(   list(CRC001T=CRC001T, CRC001N=CRC001N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =10000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4), set_size.scale_max =10000, set_size.show = TRUE,
mainbar.y.label = "Overlapping genes", sets.x.label = "Total gens")
## all
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N, CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =10000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.4,0.6),  nsets = 7, # how many sample to show
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
## paired gene
upset(  fromList(   list(CRC001T=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001T") ) %>% select(Gene) )  ) ,
CRC001N=unlist ( c( class.stat %>% filter(Sample %in% c("CRC001N") ) %>% select(Gene) )  ) )  ),
keep.order = TRUE, point.size = 2.2,
text.scale = 1.5 , mb.ratio= c(0.6,0.4), set_size.scale_max =10000, set_size.show = TRUE,
mainbar.y.label = "Overlapping genes", sets.x.label = "Total genes")
upset(  fromList(   list(CRC001T=CRC001T, CRC001N=CRC001N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =10000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
## normal group
upset(  fromList(   list(CRC001N=CRC001N, CRC008N=CRC008N, CRC010N=CRC010N )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
## tumor group
upset(  fromList(   list(CRC001T=CRC001T, CRC003T=CRC003T, CRC006T=CRC006T, CRC007T=CRC007T )  ),
keep.order = TRUE, point.size = 2.2, set_size.scale_max =11000, set_size.show = TRUE,
text.scale = 1.5 , mb.ratio= c(0.6,0.4),
mainbar.y.label = "Overlapping isoforms", sets.x.label = "Total isoforms")
.libPaths(c("/data/cache/zhongxu/R"))
knitr::opts_chunk$set(echo = F, warning = F, message = F, fig.pos = 'H', cache = T)
smp.names = c("CRC001N", "CRC008N", "CRC010N", "CRC001T", "CRC003T", "CRC006T", "CRC007T")
dpsi.cutoff = 0.4
pval.cutoff = 0.005
tpm.cutoff = 5
# dpsi.cutoff = 0
# pval.cutoff = 0.05
# tpm.cutoff = 0
isoform.final.table <- get.final.suppa.table(sample.names = smp.names,
dpsi = "analysis/05suppa/diffSplice.isoform.dpsi.temp.0",
psi  = "analysis/05suppa/diffSplice.isoform.psivec",
event.tmp = "analysis/05suppa/diffSplice.isoform_avglogtpm.tab",
dpsi.cutoff = dpsi.cutoff, tpm.cutoff = tpm.cutoff, pval.cutoff = pval.cutoff)
isoform.final.table$Name <- gsub(";ALL-",";",isoform.final.table$Name)
isoform.final.table$Isoform <- gsub("ALL-","",isoform.final.table$Isoform)
library(scales)
library(ggplot2)
#### isoform
p <- ggplot(isoform.final.table, aes(x=dPSI, y=log10pval, color=sig))
p + geom_point() +
geom_vline(xintercept=c(-dpsi.cutoff,dpsi.cutoff), linetype="solid", size=0.3) +
geom_hline(yintercept=-log10(pval.cutoff), size=0.3) +
xlab(expression(~Delta~PSI)) + ylab("-log10(p-value)") + theme_classic()  +
scale_color_manual(values=c("sig" = "#d00000", "not sig" = "#1d3557", "nan" = "gray80")) +
scale_x_continuous(breaks=pretty_breaks(n=5), limits = c(-1, 1)) + cowplot::theme_cowplot(font_family = "Arial") #+
#scale_y_continuous(breaks=pretty_breaks(n=5), limits = c(0, 5) )
#### isoforms
p <- ggplot(isoform.final.table[isoform.final.table$logRNAc > 0,], aes(x=logRNAc, y=dPSI, color=sig))
p + geom_point() +
scale_color_manual(values=c("sig" = "#d00000", "not sig" = "#1d3557", "nan" = "gray80")) +
labs(title="", x="Average transcript abundance", y=expression(~Delta~PSI))  + theme_classic() + cowplot::theme_cowplot(font_family = "Arial")
candidate.isos <- isoform.final.table %>% filter(sig=="sig")
cat("Total candidate genes", length(unique(candidate.isos$Gene)), "\n",unique(candidate.isos$Gene) ,"\n" )
cat("\n\n------\n",
length(intersect(unique(candidate.isos$Gene), event.final.table$Gene)),
" Genes with definitive AS events: \n",
intersect(unique(candidate.isos$Gene), event.final.table$Gene),"\n")
knitr::kable(candidate.isos)
rm(p)
devtools::document()
devtools::document()
getwd()
getwd()
getwd()
getwd()
devtools::document()
.libPaths("/data/cache/zhongxu/R")
devtools::document()
library(loonR)
?event_pie
library(loonR)
?SuppaGetFinalTable
SuppaGetFinalTable
?SuppaGetFinalTable
??SuppaGetFinalTable
library(loonR)
devtools::load_all(".")
??SuppaGetFinalTable
SuppaEventPie
?SuppaEventPie
library(lloR)
library(loonR)
?SuppaEventPie
devtools::document()
?SuppaEventPie
?SuppaGetFinalTable
devtools::document()
devtools::install_github("ProfessionalFarmer/loonR")
library(loonR)
getwd()
library(loonR)
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
library(loonR)
devtools::document()
library(loonR)
DrawMutationType()
library(loonR)
devtools::install_github("ProfessionalFarmer/loonR")
devtools::install_github("ProfessionalFarmer/loonR",lib="/data/cache/zhongxu/R")
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
devtools::document()
devtools::document()
library(loonR)
library(loonR)
devtools::document()
devtools::document()
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
devtools::install_github("ProfessionalFarmer/loonR")
library(loonR)
devtools::document()
library(loonR)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
find("plot.pca")
devtools::document()
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::install_github("ProfessionalFarmer/loonR")
devtools::install_github("ProfessionalFarmer/loonR", lib ="/data/ca")
devtools::install_github("ProfessionalFarmer/loonR", lib ="/data/cache/zhongxu/R")
p <- ggscatter(df_pcs, x="PC1", y="PC2", color="Class", palette = palette, ellipse = TRUE) +
xlab(percentage[1]) +
ylab(percentage[2])
p <- ggpar(p, legend = "right", legend.title = legend.title, main = main.title)
gfplot::get_color()
gfplot::get_color
get_palette("jama")
get_palette("jama",k=2)
scales::show_col(get_palette("jama",2))
scales::alpha("#374E55FF",0.5)
prcomp
plotPCA <- function(df, group, palette = 'npg', ellipse = FALSE, legend.title = "Class", main.title = ""){
# Compute PCA
df_pca <- prcomp(df, scale = TRUE) #计算主成分,强制scale
# Visualize eigenvalues (scree plot). Show the percentage of variances explained by each principal component.
# factoextra::fviz_eig(res.pca)
df_pcs <-data.frame(df_pca$x,
Class = factor(group) #定义分组
)
#解释方差比例
pcvar <- apply(df_pca$x,2,var)
pcvar <- pcvar/sum(pcvar)
#利用标准差的结果计算,与上面结果一致
#pcvar <- df_pca$sdev^2/sum(df_pca$sdev^2)
pcvar <- round(pcvar*100,1)
percentage <-paste(colnames(df_pcs)," (", paste(as.character(pcvar), "%", ")", sep=""),sep="")
library(ggplot2)
library(ggpubr)
p <- ggscatter(df_pcs, x="PC1", y="PC2", color="Class", palette = palette, ellipse = ellipse) +
xlab(percentage[1]) +
ylab(percentage[2])
p <- ggpar(p, legend = "right", legend.title = legend.title, main = main.title)
p <- p + cowplot::theme_cowplot(font_family = "Arial")
p
}
devtools::document()
rm(list = c("plotPCA"))
devtools::document()
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
library(loonR)
devtools::document()
devtools::document()
devtools::document()
library(loonR)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
res=c("1 (1)", "2 (aa)")
sapply(res, function(x){
a= strsplit(x," (")
a[1]
})
strsplit(a," (")
strsplit(res," (")
strsplit(res," \(")
strsplit(res,"(")
strsplit(res,"\(")
strsplit(res," ")
strsplit(res," \\(")
sapply(res, function(x){
a= strsplit(x," \\(")
a[1]
})
sapply(res, function(x){
a= strsplit(x," \\(")
a[[1]]
})
res
sapply(res, function(x){
a= strsplit(x," \\(")
a[1]
})
sapply(res, function(x){
a= strsplit(x," \\(")
paste(a[[1]]
)})
sapply(res, function(x){
a= strsplit(x," \\(")
paste(a[[1]])
})
res
strsplit(res," \\(")
strsplit(res," \\(")[1]
strsplit(res," \\(")[[1]]
sapply(strsplit(res," \\("), function(x) paste(x[1]) )
devtools::document()
lgfold=NA
lgfold==NA
is.na(lgfold)
devtools::document()
devtools::document()
devtools::document()
?getGEO
??getGEO
GEOquery::getGEO
??GEOquery::getGEO
devtools::document()
library(loonR)
devtools::document()
devtools::document()
devtools::document()
.libPaths()
devtools::document()
devtools::document()
.libPaths("/data/cache/zhongxu/R")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
.libPaths("/data/cache/zhongxu/R")
devtools::document()
