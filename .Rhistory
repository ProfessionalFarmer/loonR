cat("Total normal samples: ", length(normal.samples),"\n")
cat("Total NBNC samples has normal samples: ", length(
intersect(substr(normal.samples,1,12), substr(availible.nbnc.samples,1,12))
),"\n")
cat("Total Other samples has normal samples: ", length(
intersect(substr(normal.samples,1,12), substr(availible.viral.samples,1,12))
),"\n")
library(ChAMP)
healthy.nbnc.beta.df <- full.data[,c(normal.samples, availible.nbnc.samples) ]
healthy.nbnc.group = rep(c(FALSE, TRUE),
c(length(normal.samples), length(availible.nbnc.samples)  )
)
library(ChAMP)
healthy.nbnc.beta.df <- full.data[,c(normal.samples, availible.nbnc.samples) ]
healthy.nbnc.group = rep(c(FALSE, TRUE),
c(length(normal.samples), length(availible.nbnc.samples)  )
)
Sample.beta.df=healthy.nbnc.beta.df
Sample.Group=healthy.nbnc.group
Slide = NULL
arraytype="450K"
pd = data.frame(
Sample_Name = colnames(Sample.beta.df),
rownames=colnames(Sample.beta.df),
Sample_Group = Sample.Group,
Slide = Slide
)
res = list()
Slide=NULL
pd = data.frame(
Sample_Name = colnames(Sample.beta.df),
rownames=colnames(Sample.beta.df),
Sample_Group = Sample.Group,
Slide = Slide
)
Sample.Group
colnames(Sample.beta.df)
Slide
Slide = ''
pd = data.frame(
Sample_Name = colnames(Sample.beta.df),
rownames=colnames(Sample.beta.df),
Sample_Group = Sample.Group,
Slide = Slide
)
res$rawBeta = Sample.beta.df
res$pd = pd
# 5.2 filter 过滤SNP和XY上的
myLoad = champ.filter(
beta = Sample.beta.df,
pd = pd,
filterXY=TRUE,
filterMultiHit=TRUE,
arraytype=arraytype,
filterSNPs=TRUE,
filterNoCG=TRUE,
fixOutlier=FALSE,
autoimpute=TRUE
)
res$myLoad = myLoad
myNorm <- champ.norm(beta=myLoad$beta, arraytype=arraytype, cores=50, method="BMIQ")
sum(is.na(myLoad$beta))
View(myLoad$beta)
myImpute <- champ.impute()
sum(is.na(myImpute$beta))
myLoad <- champ.impute()
dim(myLoad$beta)
myLoad = champ.filter(
beta = Sample.beta.df,
pd = pd,
filterXY=TRUE,
filterMultiHit=TRUE,
arraytype=arraytype,
filterSNPs=TRUE,
filterNoCG=TRUE,
fixOutlier=FALSE,
autoimpute=TRUE
)
myImpute <- champ.impute()
myImpute
sum(is.na(Sample.beta.df))
dim(Sample.beta.df)
485577*121
485577*121-10880798
myImpute <- <- champ.impute(
method="knn",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
myImpute <-  champ.impute(
method="knn",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
myImpute <-  champ.impute(
beta=myLoad$beta,
pd=myLoad$pd,
method="knn",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
myImpute <-  champ.impute(
beta=myLoad$beta,
pd=myLoad$pd,
method="KNN",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
row.to.remove = rowSums(is.na(myLoad)) > (ncol(myLoad)/2-1)
rowSums(is.na(myLoad))
row.to.remove = rowSums(is.na(myLoad$beta)) > (ncol(myLoad$beta)/2-1)
row.to.remove
myImpute <-  champ.impute(
beta=myLoad$beta[!row.to.remove, ],
pd=myLoad$pd,
method="KNN",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
myImpute <-  champ.impute(
beta=myLoad$beta[!row.to.remove, ],
pd=myLoad$pd,
#method="KNN",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
row.to.remove = rowSums(is.na(myLoad$beta)) > (ncol(myLoad$beta)/2-1)
myImpute <- champ.impute(
beta=myLoad$beta[!row.to.remove, ],
pd=myLoad$pd,
#method="KNN",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
class(myLoad$beta[!row.to.remove, ])
myImpute <- champ.impute(
beta=myLoad$beta,
pd=myLoad$pd,
#method="KNN",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
dim(myLoad$beta[!row.to.remove, ])
warning(sum(row.to.remove))
warning(" Probes have 0.5 or above NA will be removed")
warning(sum(row.to.remove))
warning(" Probes have 0.5 or above NA will be removed","a")
myImpute <- champ.impute(
beta=as.matrix(myLoad$beta),
pd=myLoad$pd,
#method="KNN",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
colnames(myImpute$beta)
myLoad <- champ.impute(
beta=as.matrix(myLoad$beta[!row.to.remove, ]),
pd=myLoad$pd,
method="Combine",
k=5,
ProbeCutoff=0.2,
SampleCutoff=0.2
)
healthy.nbnc.DMP[[1]]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(magrittr)
# 96 nbnc samples
nbnc.samples <- c("TCGA-BC-A112-01", "TCGA-BC-A112-11", "TCGA-BC-A217-01", "TCGA-DD-A115-01", "TCGA-DD-A115-11", "TCGA-DD-A1ED-01", "TCGA-DD-A1ED-11", "TCGA-DD-A4NS-01", "TCGA-EP-A26S-01", "TCGA-EP-A26S-11", "TCGA-FV-A3I1-01", "TCGA-FV-A3I1-11", "TCGA-G3-A5SL-01", "TCGA-G3-A7M5-01", "TCGA-DD-A4NI-01", "TCGA-DD-A73E-01", "TCGA-DD-A3A7-01", "TCGA-DD-A4NL-01", "TCGA-UB-AA0V-01", "TCGA-ZS-A9CF-01", "TCGA-ZS-A9CF-02", "TCGA-5R-AA1D-01", "TCGA-BC-A216-01", "TCGA-BC-A216-11", "TCGA-DD-A1EJ-01", "TCGA-DD-A1EJ-11", "TCGA-DD-A39V-01", "TCGA-DD-A39V-11", "TCGA-DD-A39X-01", "TCGA-DD-A39X-11", "TCGA-DD-A39Y-01", "TCGA-DD-A3A0-01", "TCGA-DD-A3A1-01", "TCGA-DD-A3A1-11", "TCGA-DD-A3A2-01", "TCGA-DD-A3A2-11", "TCGA-DD-A3A3-01", "TCGA-DD-A3A3-11", "TCGA-DD-A3A5-01", "TCGA-DD-A3A5-11", "TCGA-DD-A3A6-01", "TCGA-DD-A3A6-11", "TCGA-DD-A3A8-01", "TCGA-DD-A3A8-11", "TCGA-DD-A4ND-01", "TCGA-DD-A4NE-01", "TCGA-DD-A4NK-01", "TCGA-DD-A4NN-01", "TCGA-DD-A4NP-01", "TCGA-DD-A73C-01", "TCGA-DD-A73F-01", "TCGA-DD-A73G-01", "TCGA-DD-AAVY-01", "TCGA-DD-AAW3-01", "TCGA-ES-A2HS-01", "TCGA-ES-A2HS-11", "TCGA-FV-A496-01", "TCGA-G3-A25W-01", "TCGA-G3-A25W-11", "TCGA-G3-AAV6-01", "TCGA-HP-A5N0-01", "TCGA-UB-A7MB-01", "TCGA-WJ-A86L-01", "TCGA-WX-AA46-01", "TCGA-WX-AA47-01", "TCGA-XR-A8TD-01", "TCGA-XR-A8TE-01", "TCGA-ZP-A9D4-01", "TCGA-G3-A3CI-01", "TCGA-UB-AA0U-01", "TCGA-ZP-A9D0-01", "TCGA-DD-A4NV-01", "TCGA-DD-A4NH-01", "TCGA-EP-A3RK-01", "TCGA-EP-A3RK-11", "TCGA-NI-A4U2-01", "TCGA-2Y-A9H3-01", "TCGA-DD-A1EG-01", "TCGA-DD-A1EG-11", "TCGA-5R-AA1C-01", "TCGA-BC-A10T-01", "TCGA-BC-A10T-11", "TCGA-BD-A3EP-01", "TCGA-BD-A3EP-11", "TCGA-EP-A2KA-01", "TCGA-DD-A4NJ-01", "TCGA-BD-A2L6-01", "TCGA-BD-A2L6-11", "TCGA-DD-A73A-01", "TCGA-DD-AADU-01", "TCGA-G3-A7M7-01", "TCGA-2Y-A9H7-01", "TCGA-DD-A1EF-01", "TCGA-DD-A1EF-11", "TCGA-DD-A4NA-01")
# viral sample 65
viral.samples <- c("TCGA-DD-A119-01", "TCGA-DD-A119-11", "TCGA-DD-A1EL-01", "TCGA-DD-A1EL-11", "TCGA-G3-A25U-01", "TCGA-G3-AAV0-01", "TCGA-QA-A7B7-01", "TCGA-RC-A7SB-01", "TCGA-ES-A2HT-01", "TCGA-ES-A2HT-11", "TCGA-G3-A25T-01", "TCGA-DD-A4NO-01", "TCGA-DD-AAD3-01", "TCGA-DD-AAE3-01", "TCGA-DD-AAE9-01", "TCGA-DD-AAEA-01", "TCGA-DD-AAED-01", "TCGA-UB-A7MC-01", "TCGA-2Y-A9H1-01", "TCGA-2Y-A9H5-01", "TCGA-MI-A75E-01", "TCGA-DD-A1EA-01", "TCGA-DD-AAC8-01", "TCGA-DD-AACD-01", "TCGA-DD-AAD2-01", "TCGA-G3-A25X-01", "TCGA-G3-A25X-11", "TCGA-UB-A7ME-01", "TCGA-DD-AAD8-01", "TCGA-G3-AAUZ-01", "TCGA-G3-A7M6-01", "TCGA-RC-A7SK-01", "TCGA-ZP-A9D2-01", "TCGA-DD-AACX-01", "TCGA-DD-AAD5-01", "TCGA-DD-AADG-01", "TCGA-DD-AAE7-01", "TCGA-2Y-A9HA-01", "TCGA-BW-A5NP-01", "TCGA-DD-A116-01", "TCGA-DD-A116-11", "TCGA-DD-A1EH-01", "TCGA-DD-A1EH-11", "TCGA-DD-AACM-01", "TCGA-DD-AACY-01", "TCGA-DD-AADE-01", "TCGA-DD-AAE0-01", "TCGA-DD-AAVS-01", "TCGA-DD-AAVU-01", "TCGA-DD-AAVV-01", "TCGA-DD-AAW0-01", "TCGA-G3-A25Y-01", "TCGA-G3-AAV4-01", "TCGA-RC-A7SH-01", "TCGA-XR-A8TF-01", "TCGA-ZP-A9CZ-01", "TCGA-BW-A5NO-01", "TCGA-FV-A495-01", "TCGA-RC-A7SF-01", "TCGA-G3-A25Z-01", "TCGA-G3-AAV7-01", "TCGA-3K-AAZ8-01", "TCGA-DD-A114-01", "TCGA-DD-A114-11", "TCGA-G3-A3CJ-01")
full.data <- data.table::fread("./data/TCGA.LIHC.sampleMap%2FHumanMethylation450.gz")
full.data <- as.data.frame(full.data)
r.names <- full.data$sample
full.data %<>% select(starts_with("TCGA"))
row.names(full.data) = r.names
rm(r.names)
all.samples <- colnames(full.data)
cat("Total samples: ", length(all.samples),"\n")
# https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/sample-type-codes
tp.samples <- TCGAbiolinks::TCGAquery_SampleTypes(all.samples, "TP")
cat("Total tumor samples: ", length(tp.samples),"\n\n")
availible.nbnc.samples <- intersect(tp.samples, nbnc.samples)
cat("Total tumor samples NBNC-HCC: ", length( availible.nbnc.samples ) ,"\n")
availible.viral.samples <- intersect(tp.samples, viral.samples )
cat("Total tumor samples Other-HCC: ", length( availible.viral.samples ) ,"\n")
normal.samples <- TCGAbiolinks::TCGAquery_SampleTypes(all.samples, "NT")
cat("Total normal samples: ", length(normal.samples),"\n")
cat("Total NBNC samples has normal samples: ", length(
intersect(substr(normal.samples,1,12), substr(availible.nbnc.samples,1,12))
),"\n")
cat("Total Other samples has normal samples: ", length(
intersect(substr(normal.samples,1,12), substr(availible.viral.samples,1,12))
),"\n")
load("./data/myNorm.rdata")
library(ChAMP)
healthy.nbnc.beta.df <- myNorm[,c(normal.samples, availible.nbnc.samples) ]
healthy.nbnc.group = rep(c(FALSE, TRUE),
c(length(normal.samples),
length(availible.nbnc.samples)  )
)
healthy.nbnc.DMP <- champ.DMP(
beta = healthy.nbnc.beta.df,
pheno = healthy.nbnc.group,
arraytype = "450K"
)
# DMP.GUI(
#   DMP=healthy.nbnc.DMP[[1]],
#   beta=healthy.nbnc.beta.df,
#   pheno=healthy.nbnc.group
# )
View(healthy.nbnc.DMP[[1]])
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( logFC > 0.5 )
dim(healthy.nbnc.DMP.candi)
View(healthy.nbnc.DMP.candi)
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(logFC) > 0.5 )
View(healthy.nbnc.DMP.candi)
library(ChAMP)
healthy.viral.beta.df <- myNorm[,c(normal.samples, availible.viral.samples) ]
healthy.viral.group = rep(c(FALSE, TRUE),
c(length(normal.samples),
length(availible.viral.samples)  )
)
healthy.viral.DMP <- champ.DMP(
beta = healthy.viral.beta.df,
pheno = healthy.viral.group,
arraytype = "450K"
)
# DMP.GUI(
#   DMP=healthy.nbnc.DMP[[1]],
#   beta=healthy.nbnc.beta.df,
#   pheno=healthy.nbnc.group
# )
healthy.viral.DMP.candi <- healthy.viral.DMP[[1]] %>% filter( abs(logFC) > 0.5 )
View(healthy.viral.DMP.candi)
class(healthy.nbnc.beta.df)
rownames(healthy.nbnc.beta.df)
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0]
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
row.names(healthy.nbnc.DMP.candi
)
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(logFC) > 0.4 )
setdiff(
rownames(healthy.nbnc.DMP.candi),
c( # 共有上调的
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
)
c( # 共有上调的
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(logFC) > 0.5 )
c( # 共有上调的
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
row.names(healthy.nbnc.DMP.candi)
c( # 共有上调的
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0]
row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0]
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(logFC) > 0.4 )
c( # 共有上调的
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0]
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0]
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$logFC >0 & viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$logFC >0 & viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
library(ChAMP)
viral.nbnc.samples <- myNorm[,c(availible.viral.samples, availible.nbnc.samples) ]
viral.nbnc.group = rep(c(FALSE, TRUE),
c(length(availible.viral.samples),
length(availible.nbnc.samples)  )
)
viral.nbnc.DMP <- champ.DMP(
beta = viral.nbnc.samples,
pheno = viral.nbnc.group,
arraytype = "450K"
)
intersect(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$logFC >0 & viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
intersect(row.names(healthy.nbnc.DMP.candi),
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
View(viral.nbnc.DMP[[1]][row.names(healthy.nbnc.DMP.candi),])
View(viral.nbnc.DMP[[1]])
dim(viral.nbnc.DMP[[1]])
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(logFC) > 0.4 )
dim(healthy.nbnc.DMP.candi)
intersect(row.names(healthy.nbnc.DMP.candi),
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(logFC) > 0.3 )
specific.candis <-  c( # 共有上调的
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )  ,
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
specific.candis
intersect(row.names(healthy.nbnc.DMP.candi),
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
View(healthy.nbnc.DMP.candi)
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )  ,
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$logFC<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC>0]
row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$logFC<0]
specific.candis
intersect(row.names(healthy.nbnc.DMP.candi),
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )\
intersect(row.names(healthy.nbnc.DMP.candi),
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
specific.candis <-  c( # 共有上调的
intersect(row.names(healthy.nbnc.DMP.candi),
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
)
View(healthy.nbnc.DMP.candi[healthy.nbnc.DMP.candi,])
View(healthy.nbnc.DMP.candi[specific.candis,])
View(viral.nbnc.DMP[[1]][specific.candis,])
View(healthy.nbnc.DMP.candi)
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(deltaBeta) > 0.3 )
\
dim(healthy.nbnc.DMP.candi)
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$deltaBeta>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$deltaBeta<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$deltaBeta>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$deltaBeta<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
intersect(row.names(healthy.nbnc.DMP.candi),
row.names(viral.nbnc.DMP[[1]])[viral.nbnc.DMP[[1]]$adj.P.Val < 0.05  ] )
library(ChAMP)
healthy.viral.nbnc.samples <- myNorm[,c(normal.samples, availible.viral.samples, availible.nbnc.samples) ]
healthy.viral.nbnc.group = rep(c(FALSE, TRUE),
c(length(normal.samples, availible.viral.samples),
length(availible.nbnc.samples)  )
)
health.viral.nbnc.DMP <- champ.DMP(
beta = healthy.viral.nbnc.samples,
pheno = healthy.viral.nbnc.group,
arraytype = "450K"
)
library(ChAMP)
healthy.viral.nbnc.samples <- myNorm[,c(normal.samples, availible.viral.samples, availible.nbnc.samples) ]
healthy.viral.nbnc.group = rep(c(FALSE, TRUE),
c(length(normal.samples, availible.viral.samples),
length(availible.nbnc.samples)  )
)
library(ChAMP)
healthy.viral.nbnc.samples <- myNorm[,c(normal.samples, availible.viral.samples, availible.nbnc.samples) ]
healthy.viral.nbnc.group = rep(c(FALSE, TRUE),
c(length(c(normal.samples, availible.viral.samples) ),
length(availible.nbnc.samples)  )
)
health.viral.nbnc.DMP <- champ.DMP(
beta = healthy.viral.nbnc.samples,
pheno = healthy.viral.nbnc.group,
arraytype = "450K"
)
View(health.viral.nbnc.DMP)
View(health.viral.nbnc.DMP$FALSE_to_TRUE)
c( # 共有上调的
setdiff(row.names(healthy.nbnc.DMP[[1]])[healthy.nbnc.DMP[[1]]$deltaBeta>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
setdiff(row.names(healthy.nbnc.DMP[[1]])[healthy.nbnc.DMP[[1]]$deltaBeta<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
View(healthy.nbnc.DMP[[1]][specific.candis,])
row.names(healthy.nbnc.DMP[[1]])
setdiff(row.names(healthy.nbnc.DMP[[1]])[healthy.nbnc.DMP[[1]]$deltaBeta>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
setdiff(row.names(healthy.nbnc.DMP[[1]])[healthy.nbnc.DMP[[1]]$deltaBeta<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
specific.candis <-  c( # 共有上调的
setdiff(row.names(healthy.nbnc.DMP[[1]])[healthy.nbnc.DMP[[1]]$deltaBeta>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
setdiff(row.names(healthy.nbnc.DMP[[1]])[healthy.nbnc.DMP[[1]]$deltaBeta<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
View(healthy.nbnc.DMP[[1]][specific.candis,])
View(healthy.viral.DMP[[1]][specific.candis])
View(healthy.viral.DMP[[1]][specific.candis,])
View(healthy.viral.DMP[[1]][specific.candis,])
View(healthy.viral.DMP[[1]][specific.candis,])
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(magrittr)
# 96 nbnc samples
nbnc.samples <- c("TCGA-BC-A112-01", "TCGA-BC-A112-11", "TCGA-BC-A217-01", "TCGA-DD-A115-01", "TCGA-DD-A115-11", "TCGA-DD-A1ED-01", "TCGA-DD-A1ED-11", "TCGA-DD-A4NS-01", "TCGA-EP-A26S-01", "TCGA-EP-A26S-11", "TCGA-FV-A3I1-01", "TCGA-FV-A3I1-11", "TCGA-G3-A5SL-01", "TCGA-G3-A7M5-01", "TCGA-DD-A4NI-01", "TCGA-DD-A73E-01", "TCGA-DD-A3A7-01", "TCGA-DD-A4NL-01", "TCGA-UB-AA0V-01", "TCGA-ZS-A9CF-01", "TCGA-ZS-A9CF-02", "TCGA-5R-AA1D-01", "TCGA-BC-A216-01", "TCGA-BC-A216-11", "TCGA-DD-A1EJ-01", "TCGA-DD-A1EJ-11", "TCGA-DD-A39V-01", "TCGA-DD-A39V-11", "TCGA-DD-A39X-01", "TCGA-DD-A39X-11", "TCGA-DD-A39Y-01", "TCGA-DD-A3A0-01", "TCGA-DD-A3A1-01", "TCGA-DD-A3A1-11", "TCGA-DD-A3A2-01", "TCGA-DD-A3A2-11", "TCGA-DD-A3A3-01", "TCGA-DD-A3A3-11", "TCGA-DD-A3A5-01", "TCGA-DD-A3A5-11", "TCGA-DD-A3A6-01", "TCGA-DD-A3A6-11", "TCGA-DD-A3A8-01", "TCGA-DD-A3A8-11", "TCGA-DD-A4ND-01", "TCGA-DD-A4NE-01", "TCGA-DD-A4NK-01", "TCGA-DD-A4NN-01", "TCGA-DD-A4NP-01", "TCGA-DD-A73C-01", "TCGA-DD-A73F-01", "TCGA-DD-A73G-01", "TCGA-DD-AAVY-01", "TCGA-DD-AAW3-01", "TCGA-ES-A2HS-01", "TCGA-ES-A2HS-11", "TCGA-FV-A496-01", "TCGA-G3-A25W-01", "TCGA-G3-A25W-11", "TCGA-G3-AAV6-01", "TCGA-HP-A5N0-01", "TCGA-UB-A7MB-01", "TCGA-WJ-A86L-01", "TCGA-WX-AA46-01", "TCGA-WX-AA47-01", "TCGA-XR-A8TD-01", "TCGA-XR-A8TE-01", "TCGA-ZP-A9D4-01", "TCGA-G3-A3CI-01", "TCGA-UB-AA0U-01", "TCGA-ZP-A9D0-01", "TCGA-DD-A4NV-01", "TCGA-DD-A4NH-01", "TCGA-EP-A3RK-01", "TCGA-EP-A3RK-11", "TCGA-NI-A4U2-01", "TCGA-2Y-A9H3-01", "TCGA-DD-A1EG-01", "TCGA-DD-A1EG-11", "TCGA-5R-AA1C-01", "TCGA-BC-A10T-01", "TCGA-BC-A10T-11", "TCGA-BD-A3EP-01", "TCGA-BD-A3EP-11", "TCGA-EP-A2KA-01", "TCGA-DD-A4NJ-01", "TCGA-BD-A2L6-01", "TCGA-BD-A2L6-11", "TCGA-DD-A73A-01", "TCGA-DD-AADU-01", "TCGA-G3-A7M7-01", "TCGA-2Y-A9H7-01", "TCGA-DD-A1EF-01", "TCGA-DD-A1EF-11", "TCGA-DD-A4NA-01")
# viral sample 65
viral.samples <- c("TCGA-DD-A119-01", "TCGA-DD-A119-11", "TCGA-DD-A1EL-01", "TCGA-DD-A1EL-11", "TCGA-G3-A25U-01", "TCGA-G3-AAV0-01", "TCGA-QA-A7B7-01", "TCGA-RC-A7SB-01", "TCGA-ES-A2HT-01", "TCGA-ES-A2HT-11", "TCGA-G3-A25T-01", "TCGA-DD-A4NO-01", "TCGA-DD-AAD3-01", "TCGA-DD-AAE3-01", "TCGA-DD-AAE9-01", "TCGA-DD-AAEA-01", "TCGA-DD-AAED-01", "TCGA-UB-A7MC-01", "TCGA-2Y-A9H1-01", "TCGA-2Y-A9H5-01", "TCGA-MI-A75E-01", "TCGA-DD-A1EA-01", "TCGA-DD-AAC8-01", "TCGA-DD-AACD-01", "TCGA-DD-AAD2-01", "TCGA-G3-A25X-01", "TCGA-G3-A25X-11", "TCGA-UB-A7ME-01", "TCGA-DD-AAD8-01", "TCGA-G3-AAUZ-01", "TCGA-G3-A7M6-01", "TCGA-RC-A7SK-01", "TCGA-ZP-A9D2-01", "TCGA-DD-AACX-01", "TCGA-DD-AAD5-01", "TCGA-DD-AADG-01", "TCGA-DD-AAE7-01", "TCGA-2Y-A9HA-01", "TCGA-BW-A5NP-01", "TCGA-DD-A116-01", "TCGA-DD-A116-11", "TCGA-DD-A1EH-01", "TCGA-DD-A1EH-11", "TCGA-DD-AACM-01", "TCGA-DD-AACY-01", "TCGA-DD-AADE-01", "TCGA-DD-AAE0-01", "TCGA-DD-AAVS-01", "TCGA-DD-AAVU-01", "TCGA-DD-AAVV-01", "TCGA-DD-AAW0-01", "TCGA-G3-A25Y-01", "TCGA-G3-AAV4-01", "TCGA-RC-A7SH-01", "TCGA-XR-A8TF-01", "TCGA-ZP-A9CZ-01", "TCGA-BW-A5NO-01", "TCGA-FV-A495-01", "TCGA-RC-A7SF-01", "TCGA-G3-A25Z-01", "TCGA-G3-AAV7-01", "TCGA-3K-AAZ8-01", "TCGA-DD-A114-01", "TCGA-DD-A114-11", "TCGA-G3-A3CJ-01")
full.data <- data.table::fread("./data/TCGA.LIHC.sampleMap%2FHumanMethylation450.gz")
full.data <- as.data.frame(full.data)
r.names <- full.data$sample
full.data %<>% select(starts_with("TCGA"))
row.names(full.data) = r.names
rm(r.names)
all.samples <- colnames(full.data)
cat("Total samples: ", length(all.samples),"\n")
# https://gdc.cancer.gov/resources-tcga-users/tcga-code-tables/sample-type-codes
tp.samples <- TCGAbiolinks::TCGAquery_SampleTypes(all.samples, "TP")
cat("Total tumor samples: ", length(tp.samples),"\n\n")
availible.nbnc.samples <- intersect(tp.samples, nbnc.samples)
cat("Total tumor samples NBNC-HCC: ", length( availible.nbnc.samples ) ,"\n")
availible.viral.samples <- intersect(tp.samples, viral.samples )
cat("Total tumor samples Other-HCC: ", length( availible.viral.samples ) ,"\n")
normal.samples <- TCGAbiolinks::TCGAquery_SampleTypes(all.samples, "NT")
cat("Total normal samples: ", length(normal.samples),"\n")
cat("Total NBNC samples has normal samples: ", length(
intersect(substr(normal.samples,1,12), substr(availible.nbnc.samples,1,12))
),"\n")
cat("Total Other samples has normal samples: ", length(
intersect(substr(normal.samples,1,12), substr(availible.viral.samples,1,12))
),"\n")
load("./data/myNorm.rdata")
library(ChAMP)
healthy.nbnc.beta.df <- myNorm[,c(normal.samples, availible.nbnc.samples) ]
healthy.nbnc.group = rep(c(FALSE, TRUE),
c(length(normal.samples),
length(availible.nbnc.samples)  )
)
healthy.nbnc.DMP <- champ.DMP(
beta = healthy.nbnc.beta.df,
pheno = healthy.nbnc.group,
arraytype = "450K"
)
# DMP.GUI(
#   DMP=healthy.nbnc.DMP[[1]],
#   beta=healthy.nbnc.beta.df,
#   pheno=healthy.nbnc.group
# )
healthy.nbnc.DMP.candi <- healthy.nbnc.DMP[[1]] %>% filter( abs(deltaBeta) > 0.15 )
library(ChAMP)
healthy.viral.beta.df <- myNorm[,c(normal.samples, availible.viral.samples) ]
healthy.viral.group = rep(c(FALSE, TRUE),
c(length(normal.samples),
length(availible.viral.samples)  )
)
healthy.viral.DMP <- champ.DMP(
beta = healthy.viral.beta.df,
pheno = healthy.viral.group,
arraytype = "450K"
)
# DMP.GUI(
#   DMP=healthy.viral.DMP[[1]],
#   beta=healthy.viral.DMP,
#   pheno=healthy.viral.group
# )
# healthy.viral.DMP.candi <- healthy.viral.DMP[[1]] %>% filter( abs(logFC) > 0.5 )
specific.candis <-  c( # 共有上调的
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$deltaBeta>0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta >0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] ),
setdiff(row.names(healthy.nbnc.DMP.candi)[healthy.nbnc.DMP.candi$deltaBeta<0],
row.names(healthy.viral.DMP[[1]])[healthy.viral.DMP[[1]]$deltaBeta<0 & healthy.viral.DMP[[1]]$adj.P.Val < 0.05  ] )
)
# specific.candis from ## Viral compare normal
# healthy.nbnc.DMP[[1]][specific.candis,] annotation
raw.lasso.df <- myNorm[,c(normal.samples, availible.nbnc.samples)]
lasso.group <- rep(c(FALSE,TRUE),c(length(normal.samples), length(availible.nbnc.samples)))
lasso.res <- loonR::lasso.select.feature(t(raw.lasso.df), lasso.group, scale = F)
lasso.cv.res <- loonR::lasso.cv.select.feature(
t(raw.lasso.df), lasso.group, cores = 100, scale = F
)
rfe.res <- loonR::feature.selection.RFE(
t(raw.lasso.df), lasso.group, cores = 100,
scale = F, repeats = 100, sizes = 5:15)
